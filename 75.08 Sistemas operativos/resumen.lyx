#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{titlesec}
\usepackage{graphicx}
\usepackage{color}

\titleformat{\section}
{\color{red}\normalfont\Large\bfseries}{\thesection}{1em}{}

\titleformat{\subsection}
{\color{blue}\normalfont\Large\bfseries}{\thesubsection}{1em}{}

\titleformat{\subsubsection}
{\color{cyan}\normalfont\Large\bfseries}{\thesubsubsection}{1em}{}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding T1
\font_roman default
\font_sans default
\font_typewriter beramono
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Sistemas Operativos"
\pdf_author "Maria Ines Parnisari"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 0
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 3cm
\rightmargin 2.5cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 1
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "basicstyle={\footnotesize\ttfamily},commentstyle={\color{blue}},emphstyle={\color{red}},frame=single,keywordstyle={\color{red}},language={C},numbers=left,numbersep=5pt,stepnumber=1,tabsize=2"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
[75.08] Sistemas Operativos
\end_layout

\begin_layout Author
María Inés Parnisari
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Part
Parte Teórica
\end_layout

\begin_layout Section
Introducción
\end_layout

\begin_layout Subsection
El Zoo
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="11cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Tipo
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Características
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Mainframes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gran capacidad de I/O, seguridad, disponibilidad.
 
\end_layout

\begin_layout Itemize
Procesamiento por lotes, 
\end_layout

\begin_layout Itemize
de transacciones,
\end_layout

\begin_layout Itemize
tiempo compartido.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Servidores
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ofrecen servicios a través de una red
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Supercomputadoras
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Velocidad de procesamiento, muchos procesadores.
 Uso: 
\emph on
high performance computing
\emph default
 (simuladores, cosmología...)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
PC
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Facilidad de uso, flexibilidad.
 Soportan multiprogramación
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Tablets, PDA
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Consolas
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Embebidas
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Diseñadas para cumplir una sola función, no aceptan software nuevo
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Cluster
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Computadoras conectadas a una LAN de alta velocidad (usos: alta disponibilidad,
 balance de carga, cálculo)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Tiempo Real
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Las aplicaciones tienen 
\emph on
deadlines
\emph default
, su uso debe ser previsible.
 Hay dos clases: 
\emph on
soft 
\emph default
y 
\emph on
hard
\emph default
.
 Las de tipo 
\emph on
hard
\emph default
, si no cumplean un 
\emph on
deadline
\emph default
 puede provocar un error fatal.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Tipos de computadoras
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Description

\emph on
Cloud
\begin_inset space ~
\end_inset

Computing
\emph default
 tipo de computación en el cual recursos virtuales que son dinámicamente
 escalables se proveen como servicios sobre Internet.
\end_layout

\begin_layout Itemize

\emph on
IAAS (Infrastructure as a Service)
\emph default
: Amazon Web Services
\end_layout

\begin_layout Itemize

\emph on
PAAS (Platform as a Service)
\emph default
: Google Code, Azure
\end_layout

\begin_layout Itemize

\emph on
SAAS (Software as a Service)
\emph default
: PayPal, Google Apps, Steam
\end_layout

\begin_layout Description
Ley
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

Amdahl El incremento en velocidad de un programa utilizando múltiples procesador
es en paralelo está limitado por el tiempo que necesita la fracción secuencial
 de dicho programa.
 
\emph on
For example, if a program needs 20 hours using a single processor core,
 and a particular portion of the program which takes one hour to execute
 cannot be parallelized, while the remaining 19 hours (95%) of execution
 time can be parallelized, then regardless of how many processors are devoted
 to a parallelized execution of this program, the minimum execution time
 cannot be less than that critical one hour.
 Hence the speedup is limited up to 20×.
\end_layout

\begin_layout Description
Ley
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

Moore La cantidad de transistores en un circuito integrado de duplica cada
 dos años.
\end_layout

\begin_layout Subsection
Definiciones
\end_layout

\begin_layout Description
Sistema
\begin_inset space ~
\end_inset

operativo
\end_layout

\begin_layout Itemize
Intermediario entre usuario y hardware.
\end_layout

\begin_layout Itemize
Entorno para ejecutar programas.
\end_layout

\begin_layout Itemize
Proporciona a los programadores un conjunto abstracto de recursos simples.
\end_layout

\begin_layout Itemize
Programa que administra el los recursos de una computadora.
\end_layout

\begin_layout Standard
Funciones del sistema operativo: 
\end_layout

\begin_layout Enumerate
Identificar y localizar 
\series bold
archivos
\series default
 mediante jerarquía de 
\series bold
directorios
\series default
.
 
\end_layout

\begin_layout Enumerate
Permitir a usuarios o grupos de usuarios establecer 
\series bold
permisos
\series default
 de acceso a archivos.
 
\end_layout

\begin_layout Enumerate
Asignar 
\series bold
espacio
\series default
 en discos, administrando la ocupación y liberación de archivos.
 
\end_layout

\begin_layout Enumerate
Coordinar la relación entre uno o varios procesos en ejecución, y su deseo
 de acceder al mismo dispositivo de almacenamiento simultáneamente (
\series bold
concurrencia
\series default
).
 
\end_layout

\begin_layout Enumerate
Coordinar la comunicación entre la CPU (que maneja tiempos electrónicos
 rápidos) y los dispositivos de almacenamiento (que maneja tiempos mecánicos
 lentos), mediante el uso de 
\series bold
buffers
\series default
.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="6cm">
<column alignment="center" valignment="top" width="7cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Sistema operativo como máquina extendida
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Sistema operativo como administrador de recursos
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/levels.PNG
	scale 60

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mediador/coordinador: resuelve conflictos en las demandas de recursos
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
El sistema operativo le oculta el 
\emph on
hardware
\emph default
 al usuario y le presenta una perspectiva mucho más entendible
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Proteger usuarios entre ellos (y de ellos mismos)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Un procesador parece como varios
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Proveer una asignación, en forma ordenada y controlada, de los procesadores,
 memorias, y dispositivos de E/S entre todos los programas que compitan
 por ellos
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Una memoria parece como varias
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Multiplexaje de recursos en tiempo y en espacio
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard

\series bold
Modos de la cpu
\series default
: restricciones a las instrucciones que pueden ejecutarse en un momento.
 Un sistema operativo puede tener partes corriendo en cada uno de los modos.
 Un bit en la PSW (
\emph on
Program Status Word
\emph default
) controla el modo.
\end_layout

\begin_layout Itemize

\series bold
Modo Kernel
\series default
: modo con menos restricciones.
\end_layout

\begin_layout Itemize

\series bold
Modo Usuario
\series default
: los programas de usuario solo pueden correr en este modo.
 No se permiten instrucciones que implican operaciones de E/S y protección
 de memoria\SpecialChar \@.

\end_layout

\begin_layout Subsection
Interrupciones
\end_layout

\begin_layout Description
Interrupciones se utilizan para pasar entre modo usuario y modo kernel.
\end_layout

\begin_deeper
\begin_layout Itemize
Sincrónicas: un programa quiere hacer algo que no tiene permitido.
\end_layout

\begin_layout Itemize
Asincrónicas: generadas por un evento externo.
\end_layout

\begin_deeper
\begin_layout Itemize
Interrupción de reloj
\end_layout

\begin_layout Itemize
Interrupción de I/O
\end_layout

\begin_layout Itemize
Interrupción externa (intentos de dividir por cero
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
Dentro del ciclo de instrucción (
\emph on
instruction
\emph default
 
\emph on
cycle
\emph default
) se encuentra el ciclo de interrupción (
\emph on
interrupt
\emph default
 
\emph on
cycle
\emph default
), en el cual el procesador chequea si ocurrió alguna interrupción.
 Si no hay interrupciones pendientes, el procesador carga la siguiente instrucci
ón del proceso actual.
 Si una interrupción está pendiente, el procesador: 
\end_layout

\begin_layout Enumerate
Guarda el contexto del programa que está siendo ejecutado (registros, código
 de condición, dirección de retorno, etc.).
\end_layout

\begin_layout Enumerate
Setea el contador de programa (
\emph on
program
\emph default
 
\emph on
counter
\emph default
) a la dirección donde comienza un programa de manejo de interrupciones
 (
\emph on
interrupt
\emph default
 
\emph on
handler
\emph default
).
 
\end_layout

\begin_layout Standard
El procesador ahora carga la primer instrucción del programa de manejo de
 interrupciones, el cual atenderá la interrupción.
 Una interrupción podría estar seguida de un cambio del proceso en ejecución,
 aunque también podría suceder que, luego de la interrupción, vuelva a reanudars
e el mismo proceso que venía ejecutándose.
\end_layout

\begin_layout Subsection
Estructura de un sistema operativo
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="4cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Sistemas monolíticos
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Sistemas en capas
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Microkernel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Cliente-servidor
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Todo el sistema operativo se ejecuta como un solo programa en modo kernel.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Some systems have more layers and are more strictly structured.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
The idea is to have the kernel, i.e.
 the portion running in supervisor mode, as small as possible and to have
 most of the operating system functionality provided by separate processes.
 The microkernel provides just enough to implement processes.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Uses the microkernel approach, in which the microkernel just handles communicati
on between clients and servers, and the main OS functions are provided by
 a number of separate processes.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
The system switches from user mode to kernel mode during the poof and then
 back when the OS does a return (an RTI or return from interrupt).
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
The actual layers of an early layered system were
\end_layout

\begin_layout Itemize

\emph on
The user process 
\end_layout

\begin_layout Itemize

\emph on
User programs 
\end_layout

\begin_layout Itemize

\emph on
I/O mgt
\end_layout

\begin_layout Itemize

\emph on
User console—process communication
\end_layout

\begin_layout Itemize

\emph on
Memory and drum management
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
This means that when a (real) user process makes a system call there are
 more processes switches
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Es poco manejable y difícil de comprender.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Unix
\end_layout

\begin_layout Standard
Los recursos del sistema son administrados por el kernel.
 El kernel implementa los servicios esenciales del sistema operativo:
\end_layout

\begin_layout Enumerate
Administración de memoria
\end_layout

\begin_layout Enumerate
Administración de procesos
\end_layout

\begin_layout Enumerate
Concurrencia
\end_layout

\begin_layout Standard
Todo en Unix es un archivo (directorios, terminales, dispositivos...)
\end_layout

\begin_layout Standard
Unix es 
\emph on
full duplex
\emph default
: todos los caracteres que se tipean se envían al kernel y luego a la terminal
 (excepto que se indique lo contrario).
\end_layout

\begin_layout Description
Shell interfaz entre el usuario y el sistema operativo.
 Programa con el que interactúan los usuarios.
 Está basado en texto.
\end_layout

\begin_deeper
\begin_layout Standard
Funciones:
\end_layout

\begin_layout Itemize
Interpretar comandos
\end_layout

\begin_layout Itemize
Determinar formas de ejecución
\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="4cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Foreground con proceso hijo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Foreground sin proceso hijo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Background con proceso hijo
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Necesita permiso de ejecución
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No necesita permiso de ejecución
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Necesita permiso de ejecución
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No devuelve el control hasta que no finaliza
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No devuelve el control hasta que no finaliza
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Devuelve el control en el momento
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
$ ./script.sh
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
$ .
 ./script.sh
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
$ ./script.sh &
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Formas de ejecución de un script en Unix
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Expandir caracteres comodines
\end_layout

\begin_layout Itemize
Expandir variables de ambiente
\end_layout

\end_deeper
\begin_layout Section
Procesos
\end_layout

\begin_layout Description
Modelo
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

procesos todo el software ejecutable está organizado en un número de procesos
 secuenciales.
\end_layout

\begin_layout Description
Proceso abstracción de la CPU.
 Instancia de un programa en ejecución, incluyendo el 
\emph on
program counter
\emph default
, registros y variables.
 Cada proceso tiene:
\end_layout

\begin_deeper
\begin_layout Itemize
su propia CPU virtual,
\end_layout

\begin_layout Itemize
un espacio de direcciones,
\end_layout

\begin_layout Itemize
una 
\series bold
tabla de archivos (user file table)
\series default
: una tabla del proceso que almacena información acerca de los archivos
 que tiene abiertos el proceso (solo almacena los 
\emph on
file
\emph default
 
\emph on
descriptors
\emph default
 - los datos del archivo se guardan en una estructura en el kernel),
\end_layout

\begin_layout Itemize
uno o más 
\emph on
threads
\emph default
 bajo su control.
\end_layout

\end_deeper
\begin_layout Subsection
Estados de un proceso
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/process-states_simple.png
	scale 15

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Estados de un proceso
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/process-states_complejo.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Estados de un proceso, ampliado
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\emph on
First, the process is "created" - it is loaded from a secondary storage
 device (hard disk or CD-ROM...) into main memory.
 After that the process scheduler assigns it the state "waiting".
 
\end_layout

\begin_layout Enumerate

\emph on
While the process is "waiting" it waits for the scheduler to do a so-called
 context switch and load the process into the processor.
 The process state then becomes "running", and the processor executes the
 process instructions.
\end_layout

\begin_layout Enumerate

\emph on
If a process needs to wait for a resource (wait for user input or file to
 open ...), it is assigned the "blocked" state.
 The process state is changed back to "waiting" when the process no longer
 needs to wait.
\end_layout

\begin_layout Enumerate

\emph on
Once the process finishes execution, or is terminated by the operating system,
 it is no longer needed.
 The process is removed instantly or is moved to the "terminated" state.
 When removed, it just waits to be removed from main memory
\end_layout

\begin_layout Description

\emph on
States 
\end_layout

\begin_layout Itemize

\series bold
\emph on
Created
\series default
: the process awaits admission to the "ready" state.
 This admission will be approved or delayed by a long-term scheduler.
 Typically in most desktop computer systems, this admission will be approved
 automatically, however for real-time operating systems this admission may
 be delayed.
\end_layout

\begin_layout Itemize

\series bold
\emph on
Waiting / Ready
\series default
: process has been loaded into main memory and is awaiting execution on
 a CPU (to be context switched onto the CPU by the dispatcher, or short-term
 scheduler).
 There may be many "ready" processes at any one point of the system's execution.
 A ready queue or run queue is used in computer scheduling.
\end_layout

\begin_layout Itemize

\series bold
\emph on
Running
\series default
: process moves into the running state when it is chosen for execution.
 The process's instructions are executed by one of the CPUs (or cores) of
 the system.
 There is at most one running process per CPU or core.
\end_layout

\begin_layout Itemize

\series bold
\emph on
Blocked
\series default
: process that is blocked on some event (such as I/O operation completion
 or a signal).
\end_layout

\begin_layout Itemize

\series bold
\emph on
Terminated
\series default
: process may be terminated, either from the "running" state by completing
 its execution or by explicitly being killed.
 In either of these cases, the process moves to the "terminated" state.
 If a process is not removed from memory after entering this state, it may
 become a Zombie process.
\end_layout

\begin_layout Subsection
Multiprogramación
\end_layout

\begin_layout Description
Monoprogramación hay un solo proceso corriendo a la vez en un sistema operativo.
\end_layout

\begin_layout Description
Multiprogramación hay un solo proceso corriendo a la vez en un sistema operativo
, pero se cambia rápido de un proceso a otro.
 Se multiplexa la CPU en el tiempo mediante interrupciones de reloj.
\end_layout

\begin_layout Standard
El tiempo es dividido en pequeños segmentos denominados 
\emph on
time
\emph default
 
\emph on
slices
\emph default
 (que son variables en casi todos los sistemas).
 Cuando el 
\emph on
time
\emph default
 
\emph on
slice
\emph default
 termina, el 
\emph on
dispatcher
\emph default
 le permite al 
\emph on
scheduler
\emph default
 actualizar el estado de cada proceso, y seleccionar el siguiente proceso
 a ejecutar.
\end_layout

\begin_layout Itemize
Cuando se produce una interrupción de reloj, el 
\series bold
\emph on
scheduler
\series default
\emph default
 decide a qué proceso en estado 
\emph on
ready 
\emph default
darle el control.
 Para hacerlo, se mantiene una cola de PCBs correspondientes a procesos
 en estado 
\emph on
ready.
\end_layout

\begin_deeper
\begin_layout Standard
Objetivos del 
\emph on
scheduler:
\end_layout

\begin_layout Enumerate

\emph on
Fairness
\emph default
: dar una participación adecuada del reparto de tiempo de CPU
\end_layout

\begin_layout Enumerate

\emph on
Load
\emph default
 
\emph on
Balancing
\emph default
: equilibrar el uso de recursos
\end_layout

\begin_layout Enumerate
Aplicar las políticas generales del sistema (prioridades, seguridad)
\end_layout

\begin_layout Standard
Respecto a la forma de manejar una interrupción de reloj, un algoritmo de
 planificación puede ser:
\end_layout

\begin_layout Itemize

\series bold
Apropiativo
\series default
: selecciona un proceso y deja que se ejecute por un máximo de tiempo.
 Si luego de ese intervalo de tiempo se sigue ejecutando, se suspende y
 se selecciona otro proceso.
\end_layout

\begin_layout Itemize

\series bold
No apropiativo
\series default
: selecciona un proceso para ejecutarlo y deja que se ejecute hasta que
 se bloquea o hasta que libera la CPU en forma voluntaria.
\end_layout

\begin_layout Standard
Las decisiones de 
\emph on
scheduling
\emph default
 se pueden tomar cuando:
\end_layout

\begin_layout Enumerate
El proceso se bloquea por esperar una operación de E/S.

\emph on
 (running
\emph default
 a 
\emph on
blocked
\emph default
).
 (no-apropiativa)
\end_layout

\begin_layout Enumerate
El proceso se crea.
 (apropiativa)
\end_layout

\begin_layout Enumerate
Ocurre una interrupción de E/S (
\emph on
blocked
\emph default
 a 
\emph on
ready
\emph default
).
 (apropiativa)
\end_layout

\begin_layout Enumerate
El proceso termina.
 (no apropiativa)
\end_layout

\begin_layout Standard
El 
\emph on
scheduler
\emph default
 tiene en cuenta los siguientes items a la hora de tomar decisiones:
\end_layout

\begin_layout Itemize
Cantidad requerida de recursos.
\end_layout

\begin_layout Itemize
Cantidad actualmente disponible de recursos.
\end_layout

\begin_layout Itemize
Prioridad del trabajo o proceso.
 
\end_layout

\begin_layout Itemize
La cantidad de tiempo de espera.
\end_layout

\end_deeper
\begin_layout Itemize
El 
\series bold
\emph on
dispatcher
\series default
\emph default
 le da a un proceso el control de la CPU.
 Implica las siguientes operaciones:
\end_layout

\begin_deeper
\begin_layout Itemize
Conmutar el contexto (
\emph on
context
\emph default
 
\emph on
switching
\emph default
).
 
\end_layout

\begin_deeper
\begin_layout Description

\emph on
Context
\begin_inset space ~
\end_inset

switch
\emph default
 
\emph on
process of storing and restoring the state (context) of a process so that
 execution can be resumed from the
\emph default
 
\emph on
same point at a later time.
 This enables multiple processes to share a single CPU and is an essential
 feature of a multitasking operating system.
 What constitutes the context is determined by the processor and the operating
 system.
 Context switches are usually computationally intensive, and much of the
 design of operating systems is to optimize the use of context switches.
 Switching from one process to another requires a certain amount of time
 for doing the administration - saving and loading registers and memory
 maps, updating various tables and lists, etc.
 
\end_layout

\begin_deeper
\begin_layout Standard

\emph on
A context switch can mean a register context switch, a task context switch,
 a stack frame switch, a thread context switch, or a process context switch.
\end_layout

\begin_layout Standard
El tiempo que dura el 
\emph on
context
\emph default
 
\emph on
switch
\emph default
 es desperdiciado (
\emph on
overhead
\emph default
) ya que el sistema no puede aprovecharlo para hacer otra cosa.
\end_layout

\begin_layout Standard
El proceso de 
\emph on
context
\emph default
 
\emph on
switching
\emph default
 consta de los siguientes pasos: 
\end_layout

\begin_layout Enumerate
Se almacena el contexto del procesador, incluyendo el 
\emph on
program
\emph default
 
\emph on
counter
\emph default
 y otros registros.
 
\end_layout

\begin_layout Enumerate
Se actualiza el bloque de control del proceso (PCB) que está actualmente
 en el estado 
\emph on
running
\emph default
.
 Esto implica cambiar el estado del proceso a alguno de los otros estados
 (
\emph on
ready
\emph default
, 
\emph on
blocked
\emph default
, etc.).
 
\end_layout

\begin_layout Enumerate
Se mueve el PCB de este proceso a la cola apropiada (
\emph on
ready
\emph default
, 
\emph on
blocked
\emph default
, etc.).
 
\end_layout

\begin_layout Enumerate
Se selecciona otro proceso para ejecución (esto implica llamar al 
\emph on
scheduler
\emph default
).
\end_layout

\begin_layout Enumerate
Se actualiza el PCB del proceso seleccionado.
 Esto implica cambiar el estado de este proceso a 
\emph on
running
\emph default
.
\end_layout

\begin_layout Enumerate
Se actualizan estructuras de datos para administración de la memoria.
\end_layout

\begin_layout Enumerate
Se restaura el contexto del procesador que existía en el momento en que
 el proceso seleccionado fue sacado del estado 
\emph on
running
\emph default
 por última vez.
 Esto implica cargar los valores del contador de programa y otros registros.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Cambiar a modo usuario.
\end_layout

\begin_layout Itemize
Saltar a la posición apropiada en el programa de usuario para ejecutar ese
 programa.
\end_layout

\end_deeper
\begin_layout Description

\emph on
Process
\begin_inset space ~
\end_inset

Control
\begin_inset space ~
\end_inset

Block
\emph default

\begin_inset space ~
\end_inset

(PCB) registro especial donde el sistema operativo agrupa toda la información
 que necesita conocer respecto a un proceso particular.
 Cada vez que se crea un proceso el sistema operativo crea el PCB correspondient
e para que sirva como descripción en tiempo de ejecución durante toda la
 vida del proceso.
\end_layout

\begin_deeper
\begin_layout Standard
La información almacenada en un PCB incluye típicamente algunos o todos
 los campos siguientes:
\end_layout

\begin_layout Itemize

\series bold
\emph on
Process State
\series default
 - Running, waiting, blocked,
\emph default
 
\emph on
etc.
\end_layout

\begin_layout Itemize

\series bold
\emph on
Process ID, Parent Process ID
\series default
.
\end_layout

\begin_layout Itemize

\series bold
\emph on
CPU registers and Program Counter
\series default
 - These need to be saved and restored when swapping processes in and out
 of the CPU.
 
\end_layout

\begin_layout Itemize

\series bold
\emph on
CPU-Scheduling information
\series default
 - Such as priority information and pointers to scheduling queues.
 
\end_layout

\begin_layout Itemize

\series bold
\emph on
Memory-Management information
\series default
 - E.g.
 page tables or segment tables.
 
\end_layout

\begin_layout Itemize

\series bold
\emph on
Accounting information
\series default
 - user and kernel CPU time consumed, account numbers, limits, etc.
 
\end_layout

\begin_layout Itemize

\series bold
\emph on
I/O Status information
\series default
 - Devices allocated, open file tables, etc.
\end_layout

\end_deeper
\begin_layout Subsection
Algoritmos de planificación de procesos
\end_layout

\begin_layout Description
Long-term
\begin_inset space ~
\end_inset

scheduling decide qué proceso de la 
\emph on
ready queue
\emph default
 pasará a memoria.
\end_layout

\begin_layout Description
Medium-term
\begin_inset space ~
\end_inset

scheduling remueve temporalmente un proceso de la memoria y lo almacena
 en almacenamiento secundario (
\emph on
swapping in-out
\emph default
).
\end_layout

\begin_layout Description
Short-term
\begin_inset space ~
\end_inset

scheduling
\emph on
 
\emph default
decide qué proceso en estado 
\emph on
ready
\emph default
 (en memoria) será ejecutado a continuación de una interrupción de reloj,
 de I/O, una 
\emph on
system call
\emph default
 o una señal.
 Toma decisiones luego de cada 
\emph on
time slice
\emph default
.
 Este 
\emph on
scheduler
\emph default
 puede ser apropiativo (
\emph on
preemptive
\emph default
 - remueve forzosamente procesos de la CPU) o no apropiativo (
\emph on
non-preemptive
\emph default
).
\end_layout

\begin_layout Standard
Los procesos que están en estado 
\emph on
ready
\emph default
 y esperando a ser ejecutados son mantenidos en una lista llamada 
\emph on
ready
\emph default
 
\emph on
queue
\emph default
.
 El encabezado de la lista contendrá punteros al primer y último PCB en
 la lista.
 La 
\emph on
ready
\emph default
 
\emph on
queue
\emph default
 podría ser implementada como una cola FIFO, una cola de prioridad, un árbol,
 una pila, o simplemente una lista desordenada.
 Conceptualmente todos los procesos en la 
\emph on
ready
\emph default
 
\emph on
queue
\emph default
 están listos y esperando por una chance para usar la CPU.
 Si un proceso que se está ejecutando debe esperar que se complete una operación
 de I/O, entonces es colocado en otra cola, llamada 
\emph on
device
\emph default
 
\emph on
queue
\emph default
.
 Cada dispositivo tiene su propia 
\emph on
device
\emph default
 
\emph on
queue.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="8cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
FIFO (
\emph on
First In, First Out
\emph default
)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No apropiativo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
La CPU se asigna a los procesos en el orden en el que la solicitan.
 Si se bloquea un proceso, se ejecuta el primer proceso en la cola.
 Si un proceso bloqueado pasa al estado 
\emph on
ready
\emph default
, se coloca al final de la cola.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
SJF (
\emph on
Shortest Job First
\emph default
)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No apropiativo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Se selecciona primero el proceso con menor tiempo de ejecución.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\emph on
Round Robin
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A cada proceso se le asigna un intervalo de tiempo (
\series bold
quántum
\series default
), durante el cual puede ejecutarse.
 Si al finalizar el quántum sigue ejecutándose, la CPU es apropiada para
 dársela a otro proceso, y el anterior se coloca al final de la cola de
 procesos.
 Si se bloquea antes de que termine el quántum, se conmuta el proceso inmediatam
ente.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Múltiples colas
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Se establecen 
\series bold
clases de prioridades
\series default
.
 Los procesos en la clase más alta se ejecutan durante 1 quántum, los de
 la siguiente clase más alta en 2 quántums, y así sucesivamente.
 Cada vez que un proceso utiliza todos sus quántums, se mueve una clase
 hacia abajo en la jerarquía.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Algoritmos de planificación
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Segmentos en un proceso
\end_layout

\begin_layout Standard

\emph on
When an executable program is read into system memory by the kernel and
 executed, it becomes a process.
 We can consider system memory to be divided into two distinct regions.
 One is user space, and the other is kernel space.
 Every process has is own user space (about 1GB virtual space) and are prevented
 from interfering with one another.
 The mode change which is from user mode to kernel mode is called a context
 switch.
\end_layout

\begin_layout Standard

\emph on
The computer program memory is organized into the following: 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/txt_data_stack_heap.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Txt, data, stack, heap
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\series bold
\emph on
Data Segment
\series default
:
\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
\emph on
Initialized
\series default
 
\series bold
data
\series default
: global and static variables used by the program that are explicitly initialize
d with a value.
\end_layout

\begin_layout Enumerate

\series bold
\emph on
Uninitalized
\series default
 
\series bold
data
\series default
 - 
\series bold
\emph default
BSS
\emph on
 
\emph default
(
\emph on
Block Started by Symbol)
\series default
: global variables and static variables that are initialized to zero or
 do not have explicit initialization in source code.
\end_layout

\begin_layout Enumerate

\series bold
\emph on
Heap
\series default
: The heap area is shared by all shared libraries and dynamically loaded
 modules in a process.
 The heap area begins at the end of the BSS segment and grows to larger
 addresses from there.
 The heap area is managed by malloc, realloc, and free, which may use the
 brk and sbrk system calls to adjust its size.
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
\emph on
Stack
\series default
: ontains the program stack, a LIFO structure.
 Stores information about the active subroutines of a computer program.
 The stack segment is used by the process for the storage of automatic identifie
r, register variables, and function call information.
 The stack grows towards the uninitialized data segment.
 
\end_layout

\begin_layout Enumerate

\series bold
\emph on
Code Segment
\series default
: The Text segment (a.k.a the Instruction segment) contains the executable
 program code and constant data.
 The text segment is marked by the operating system as read-only and can
 not be modified by the process.
 Multiple processes can share the same text segment.
 
\end_layout

\begin_layout Enumerate

\series bold
\emph on
User Area
\series default
: the OS maintains for each process a region called the u area (User Area).
 The u area contains information specific to the process (e.g.
 open files, current directory, signal action, accounting information) and
 a system stack segment for process use.
 If the process makes a system call, the stack frame information for the
 system is stored in the system stack segment.
 Again, this information is kept by the OS in an area that the process doesn't
 normally have access to.
 Thus, if this information is needed, the process must use special system
 call to access it.
 Like the process itself, the contents of the u area for the process are
 paged in and out by the OS.
\end_layout

\begin_layout Subsection
Creación y terminación de procesos
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="6cm">
<column alignment="center" valignment="top" width="7cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Creación
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Terminación
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
Al iniciar el sistema
\end_layout

\begin_layout Itemize
Con 
\emph on
system calls
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
Salida normal (voluntaria)
\end_layout

\begin_layout Itemize
Salida por error (voluntaria)
\end_layout

\begin_layout Itemize
Error fatal (involuntario)
\end_layout

\begin_layout Itemize
Muerte por otro proceso (involuntario)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard

\emph on
In Unix terminology, there are two system calls:
\series bold
 kill
\series default
 and 
\series bold
exit
\series default
.
\end_layout

\begin_layout Itemize

\series bold
\emph on
kill
\series default
 sends a signal to another process.
 If this signal is not caught (via the signal system call) the process is
 terminated.
 There is also an uncatchable signal.
 
\end_layout

\begin_layout Itemize

\series bold
\emph on
exit
\series default
 is used for self termination and can indicate success or failure.
\end_layout

\begin_layout Description
Proceso
\begin_inset space ~
\end_inset

huérfano
\emph on
 
\emph default
proceso cuyo padre ha terminado, pero que sigue corriendo.
 No se convierten en procesos zombies, son adoptados por init (proceso con
 PID 1), que espera a sus hijos.
\end_layout

\begin_layout Description
Proceso
\begin_inset space ~
\end_inset

zombie
\emph on
 
\emph default
proceso que ha terminado su ejecución (estado 
\emph on
terminated
\emph default
) pero que aún tiene una entrada en la tabla de procesos.
 Esta entrada se necesita para permitirle al proceso padre leer el 
\emph on
exit status 
\emph default
del hijo.

\emph on
 
\emph default
La 
\emph on
system call 
\emph default
kill no tiene efecto en un proceso zombie.
\end_layout

\begin_deeper
\begin_layout Standard
Un proceso está en estado zombie cuando ejecutó una llamada a 
\series bold
exit
\series default
 y aún no se limpiaron las estructuras de datos usadas por el proceso.
\end_layout

\begin_layout Standard
Una forma de obtener un proceso 
\emph on
zombie
\emph default
 es haciendo que el proceso hijo termine su ejecución con 
\family typewriter
exit()
\family default
, y que el proceso padre no ejecute 
\family typewriter
wait()
\family default
.
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
fork
\family default
 crea un proceso nuevo, duplicado del original, incluyendo todos los 
\emph on
file descriptors
\emph default
 y registros.
 Devuelve 0 en el proceso 
\begin_inset Quotes eld
\end_inset

hijo
\begin_inset Quotes erd
\end_inset

 y el PID del 
\begin_inset Quotes eld
\end_inset

hijo
\begin_inset Quotes erd
\end_inset

 en el 
\begin_inset Quotes eld
\end_inset

padre
\begin_inset Quotes erd
\end_inset

 (PID hijo 
\begin_inset Formula $\neq$
\end_inset

 PID padre).
\end_layout

\begin_layout Description

\family typewriter
exec
\family default
 reemplaza la imagen de un proceso por un archivo que está en el disco.
\end_layout

\begin_layout Description
Imagen copia de un programa.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

while (true) {
\end_layout

\begin_layout Plain Layout

	display_prompt();
\end_layout

\begin_layout Plain Layout

	read_command(command, parameters);
\end_layout

\begin_layout Plain Layout

	if (fork() != 0) {
\end_layout

\begin_layout Plain Layout

		// Proceso padre
\end_layout

\begin_layout Plain Layout

		// Se bloquea este proceso esperando al hijo
\end_layout

\begin_layout Plain Layout

		waitpid(-1, &status, 0); //simply removing the waitpid(...) gives background
 jobs.
\end_layout

\begin_layout Plain Layout

	} else {
\end_layout

\begin_layout Plain Layout

		// Proceso hijo
\end_layout

\begin_layout Plain Layout

		// User area distinta al padre
\end_layout

\begin_layout Plain Layout

		execve(command, parameters, environment);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\family roman
Shell muy simplificada.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="6cm">
<column alignment="center" valignment="top" width="6cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
fork()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\series bold
exec()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Diferencias
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
El proceso hijo es una copia exacta del padre.
 Se copian todos los datos (
\emph on
file
\emph default
 
\emph on
descriptors
\emph default
, registros, etc.).
 El proceso padre se bloquea esperando a que termine el hijo (si se utiliza
 
\family typewriter
wait()
\family default
)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Carga una imagen del programa desde un archivo, en el proceso actual.
 Se reemplazan todos los datos, excepto los 
\emph on
file
\emph default
 
\emph on
descriptors.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Estado del PCB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Antes: hay un solo PCB (el del padre).
 
\end_layout

\begin_layout Plain Layout
Después: hay dos PCB, del padre y del hijo.
 El del hijo tiene la mayor parte de los campos iguales a los campos del
 padre (UID, registro, archivos abiertos, y algunos son distintos (PID,
 PPID) 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Antes: hay un solo PCB (el del proceso).
\end_layout

\begin_layout Plain Layout
Después: hay un solo PCB (el del mismo proceso) con casi todos los mismos
 campos 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Estado del TXT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Después: se copia todo del padre al hijo, se comparte entre ambos procesos.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Después: una vez ejecutado el 
\family typewriter
exec
\family default
, se reemplaza en el proceso actual, su área de TXT por las instrucciones
 del programa a ejecutar.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Estado del U_AREA
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Antes: hay un U_AREA del proceso padre.
 
\end_layout

\begin_layout Plain Layout
Después: al nacer el proceso hijo, habrá dos U_AREA distintos (porque el
 U_AREA es propio de cada proceso) 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Después: el proceso sigue siendo el mismo, solo cambió su imagen.
 Por lo tanto, su U_AREA es la misma.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Estado de U_File Table
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
La tabla se copia al proceso hijo.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No cambia.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Estado de BSS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Se modifica porque se cargan los valores estáticos del programa.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Estado del Stack
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cambia porque es utilizado por el programa que se carga.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Proceso de boot en Linux
\end_layout

\begin_layout Enumerate
Se carga el 
\emph on
First Stage Boot Loader
\emph default
 (ejemplo: GRUB - 
\emph on
Grand Unified Bootloader
\emph default
).
\end_layout

\begin_layout Enumerate
Un 
\emph on
prompt
\emph default
 al usuario obtiene los datos de la partición y del kernel a bootear.
\end_layout

\begin_layout Enumerate
El kernel se carga como una imagen.
 Se descomprime.
 Se hace una inicialización de sus estructuras.
\end_layout

\begin_layout Enumerate
Se transfiere el control al proceso 0.
\end_layout

\begin_layout Enumerate
El proceso 0 detecta el tipo de CPU y hace una inicialización que depende
 de ésta.
\end_layout

\begin_layout Enumerate
El proceso 0 lanza la funcionalidad independiente de la arquitectura, llamando
 a 
\family typewriter
start_kernel()
\family default
.
 Se lanza a 
\begin_inset Quotes eld
\end_inset

init
\begin_inset Quotes erd
\end_inset

.
 
\begin_inset Quotes eld
\end_inset

init
\begin_inset Quotes erd
\end_inset

 es el proceso 1.
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

init
\begin_inset Quotes erd
\end_inset

 crea los procesos según 
\family typewriter
/etc/inittab
\family default
.
 Chequea y monta los filesystems según 
\family typewriter
/etc/fstab
\family default
.
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

init
\begin_inset Quotes erd
\end_inset

 espera un login para lanzar un shell de usuario.
\end_layout

\begin_layout Subsection

\emph on
System
\emph default
 y 
\emph on
library calls
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/components.png
	scale 35

\end_inset


\begin_inset Graphics
	filename img/syscall.png
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
System calls
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Los procesos se comunican con el kernel mediante 
\emph on
system calls
\emph default
, que son funciones con un prototipo estandarizado.
\end_layout

\begin_layout Itemize
Ejemplos de 
\emph on
system calls
\emph default
: 
\family typewriter
open, write, mmap, read, fstat, close, getpid, execve
\end_layout

\begin_layout Itemize
Ejemplos de 
\emph on
library calls
\emph default
: 
\family typewriter
printf, getpid
\end_layout

\begin_layout Itemize
Para ver las 
\emph on
system calls
\emph default
 que hace un programa: 
\family typewriter
strace
\family default
.
 Para ver las 
\emph on
library calls
\emph default
 que hace un programa: 
\family typewriter
ltrace
\family default
.
\end_layout

\begin_layout Description

\emph on
Blocking
\begin_inset space ~
\end_inset

system
\begin_inset space ~
\end_inset

call System call that must wait until the action can be completed.
 
\family typewriter
\emph default
read()
\family default
\emph on
 would be a good example - if no input is ready, it'll sit there and wait
 until some is (provided you haven't set it to non-blocking, of course,
 in which case it wouldn't be a blocking system call).
 Obviously, while one thread is waiting on a blocking system call, another
 thread can be off doing something else.
\end_layout

\begin_layout Standard
Pasos para ejecutar la 
\emph on
system call 
\family typewriter
\emph default
read
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int cuenta = read (fd, bufer, nbytes);
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
El programa mete los parámetros en la 
\emph on
stack
\emph default
 (primero 
\family typewriter
nbytes
\family default
,
\end_layout

\begin_layout Enumerate
luego 
\family typewriter
bufer
\family default
,
\end_layout

\begin_layout Enumerate
luego 
\family typewriter
fd
\family default
).
\end_layout

\begin_layout Enumerate
Se llama al procedimiento de biblioteca 
\family typewriter
read
\family default
.
\end_layout

\begin_layout Enumerate
El procedimiento 
\family typewriter
read
\family default
 coloca el número de la 
\emph on
system call 
\emph default
read en un registro, para que lo lea el sistema operativo.
\end_layout

\begin_layout Enumerate
El procedimiento read realiza un 
\emph on
trap
\emph default
 para cambiar al 
\series bold
modo kernel
\series default
, saltando a una dirección fija.
\end_layout

\begin_layout Enumerate
El despachador busca en una tabla de handlers al handler que maneja esta
 llamada al sistema.
\end_layout

\begin_layout Enumerate
El manejador de llamadas al sistema maneja la llamada.
\end_layout

\begin_layout Enumerate
El manejador de llamadas al sistema le regresa el control al procedimiento
 de biblioteca read.
 Vuelve a 
\series bold
modo usuario
\series default
 del procesador, el sistema operativo sigue en modo kernel.
\end_layout

\begin_layout Enumerate
El procedimiento de biblioteca le regresa el control al programa.
 El sistema operativo sale de modo kernel.
\end_layout

\begin_layout Enumerate
El programa limpia la pila, incrementando el 
\emph on
stack pointer
\emph default
.
\end_layout

\begin_layout Section
Threads
\end_layout

\begin_layout Description

\emph on
Thread
\emph default
 hilo de ejecución de un proceso, que comparte el espacio de direcciones
 con otros 
\emph on
threads
\emph default
 del proceso.
\end_layout

\begin_layout Standard

\emph on
How threads differ from processes:
\end_layout

\begin_layout Itemize

\emph on
processes are typically independent, while threads exist as subsets of a
 process 
\end_layout

\begin_layout Itemize

\emph on
processes carry considerably more state information than threads, whereas
 multiple threads within a process share process state as well as memory
 and other resources 
\end_layout

\begin_layout Itemize

\emph on
processes have separate address spaces, whereas threads share their address
 space 
\end_layout

\begin_layout Itemize

\emph on
processes interact only through system-provided inter-process communication
 mechanisms 
\end_layout

\begin_layout Itemize

\emph on
context switching between threads in the same process is typically faster
 than context switching between processes.
\end_layout

\begin_layout Itemize

\emph on
there is no hierarchy between threads
\end_layout

\begin_layout Itemize

\emph on
clock interruptions do not give the CPU to other threads; threads must give
 it voluntarily
\end_layout

\begin_layout Itemize

\emph on
threads do not compete for resources like processes do
\end_layout

\begin_layout Standard

\emph on
How threads are similar to processes:
\end_layout

\begin_layout Itemize

\emph on
they can be in the same states (running, blocked, waiting)
\end_layout

\begin_layout Itemize

\emph on
they are programmed in a sequential form
\end_layout

\begin_layout Itemize

\emph on
they have a program counter, registers, stack
\end_layout

\begin_layout Description

\emph on
Multithreading
\emph default
 múltiples 
\emph on
threads
\emph default
 dentro de un mismo proceso.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="7cm">
<column alignment="center" valignment="top" width="7cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ventajas
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Desventajas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\emph on
Responsiveness
\series default
 - One thread may provide rapid response while other threads are blocked
 or slowed down doing intensive calculations.
 
\end_layout

\begin_layout Plain Layout

\series bold
\emph on
Resource sharing
\series default
 - By default threads share common code, data, and other resources, which
 allows multiple tasks to be performed simultaneously in a single address
 space.
 
\end_layout

\begin_layout Plain Layout

\series bold
\emph on
Economy
\series default
 - Creating and managing threads (and context switches between them) is
 much faster than performing the same tasks for processes.
 
\end_layout

\begin_layout Plain Layout

\series bold
\emph on
Scalability
\series default
, i.e.
 Utilization of multiprocessor architectures.
 A single threaded process can only run on one CPU, no matter how many may
 be available, whereas the execution of a multi-threaded application may
 be split amongst available processors.
 (Note that single threaded processes can still benefit from multi-processor
 architectures when there are multiple processes contending for the CPU,
 i.e.
 when the load average is above some certain threshold.)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\emph on
Identifying
\series default
 
\series bold
tasks
\series default
 - Examining applications to find activities that can be performed concurrently.
 
\end_layout

\begin_layout Plain Layout

\series bold
\emph on
Balance
\series default
 - Finding tasks to run concurrently that provide equal value.
 I.e.
 don't waste a thread on trivial tasks.
 
\end_layout

\begin_layout Plain Layout

\series bold
\emph on
Data splitting
\series default
 - To prevent the threads from interfering with one another.
 
\end_layout

\begin_layout Plain Layout

\series bold
\emph on
Data dependency
\series default
 - If one task is dependent upon the results of another, then the tasks
 need to be synchronized to assure access in the proper order.
 
\end_layout

\begin_layout Plain Layout

\series bold
\emph on
Testing and debugging 
\series default
- Inherently more difficult in parallel processing situations, as the race
 conditions become much more complex and difficult to identify.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
Ejemplos de aplicaciones:
\end_layout

\begin_layout Enumerate
Servidor que lanza un 
\emph on
thread
\emph default
 por cada pedido.
\end_layout

\begin_layout Enumerate
Procesador de texto que tiene un 
\emph on
thread
\emph default
 que corrige la gramática, y otro 
\emph on
thread
\emph default
 que cuenta la cantidad de páginas del archivo.
\end_layout

\begin_layout Enumerate
Manejo de interfaces gráficas.
\end_layout

\begin_layout Standard
Implementación:
\end_layout

\begin_layout Itemize
Los 
\emph on
threads
\emph default
 comparten el espacio de memoria del proceso (TXT, DATA).
\end_layout

\begin_layout Itemize
Cada 
\emph on
thread
\emph default
 mantiene su propia información de estado en un 
\emph on
Thread Control Block
\emph default
 (TCB).
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/procesos e hilos.png
	scale 75

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Datos por proceso y por 
\emph on
thread
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/multithreading.png
	scale 70

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Un hilo vs.
 muchos hilos
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Caption

\begin_layout Plain Layout

\emph on
Threads
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <pthread.h>
\end_layout

\begin_layout Plain Layout

#include <stdio.h> 
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define NUMERO_DE_HILOS 10
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void* imprimir_hola_mundo (void* tid) { 	
\end_layout

\begin_layout Plain Layout

	printf("Hola mundo.
 Saludos del hilo %d0 
\backslash
n", (int)tid);
\end_layout

\begin_layout Plain Layout

	pthread_exit(NULL);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

int main (int argc, char* argv[]) {
\end_layout

\begin_layout Plain Layout

	pthread_t hilos [NUMERO_DE_HILOS]; 	
\end_layout

\begin_layout Plain Layout

	int estado, i; 
\end_layout

\begin_layout Plain Layout

	for (i = 0; i < NUMERO_DE_HILOS; i++) { 	
\end_layout

\begin_layout Plain Layout

		printf("Aqui main.
 Creando hilo %d0 
\backslash
n", i); 
\end_layout

\begin_layout Plain Layout

		estado = pthread_create(&hilos[i], NULL, imprimir_hola_mundo, (void*)i);
 	
\end_layout

\begin_layout Plain Layout

		if (estado != 0) { 
\end_layout

\begin_layout Plain Layout

			printf ("Ups.
 pthread_create devolvió el código de error %d0 
\backslash
n", estado);
\end_layout

\begin_layout Plain Layout

			return -1; 		
\end_layout

\begin_layout Plain Layout

		} 		
\end_layout

\begin_layout Plain Layout

	} 	
\end_layout

\begin_layout Plain Layout

	return 0; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Salida
\end_layout

\begin_layout Plain Layout

$ gcc -pthread threads.c -o threads 
\end_layout

\begin_layout Plain Layout

$ ./threads  
\end_layout

\begin_layout Plain Layout

Aqui main.
 Creando hilo 00 
\end_layout

\begin_layout Plain Layout

Aqui main.
 Creando hilo 10 
\end_layout

\begin_layout Plain Layout

Aqui main.
 Creando hilo 20 
\end_layout

\begin_layout Plain Layout

Hola mundo.
 Saludos del hilo 00 
\end_layout

\begin_layout Plain Layout

Aqui main.
 Creando hilo 30 
\end_layout

\begin_layout Plain Layout

Hola mundo.
 Saludos del hilo 10 
\end_layout

\begin_layout Plain Layout

Aqui main.
 Creando hilo 40 
\end_layout

\begin_layout Plain Layout

Hola mundo.
 Saludos del hilo 30 
\end_layout

\begin_layout Plain Layout

Aqui main.
 Creando hilo 50  
\end_layout

\begin_layout Plain Layout

Hola mundo.
 Saludos del hilo 40
\end_layout

\begin_layout Plain Layout

Hola mundo.
 Saludos del hilo 20 
\end_layout

\begin_layout Plain Layout

Aqui main.
 Creando hilo 60 
\end_layout

\begin_layout Plain Layout

Hola mundo.
 Saludos del hilo 50 
\end_layout

\begin_layout Plain Layout

Aqui main.
 Creando hilo 70  
\end_layout

\begin_layout Plain Layout

Hola mundo.
 Saludos del hilo 60 
\end_layout

\begin_layout Plain Layout

Aqui main.
 Creando hilo 80 
\end_layout

\begin_layout Plain Layout

Aqui main.
 Creando hilo 90 
\end_layout

\begin_layout Plain Layout

Hola mundo.
 Saludos del hilo 80
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Programa de ejemplo que usa 
\emph on
threads
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Implementación de threads
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="5cm">
<column alignment="center" valignment="top" width="5cm">
<column alignment="center" valignment="top" width="5cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
En espacio de usuario
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
En kernel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Híbrido
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cada proceso necesita su tabla privada de 
\emph on
threads.
 
\emph default
El kernel desconoce que hay 
\emph on
threads.
 
\emph default
Se utilizan bibliotecas.
 
\begin_inset Graphics
	filename img/hilo_user space.png
	scale 40

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No hay tabla de 
\emph on
threads
\emph default
 en cada proceso.
 El kernel tiene una tabla de 
\emph on
threads.
\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/hilo_kernel space.png
	scale 40

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Utilizar hilos en espacio de usuario y después multiplexar los hilos de
 nivel usuario con alguno o con todos los hilos de nivel kernel.
\end_layout

\begin_layout Plain Layout
El kernel solo puede ver y planificar los hilos de nivel kernel.
\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/hilo_hibrido.png
	scale 50

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
El kernel toma cada proceso y lo ejecuta en un 
\emph on
quantum
\emph default
 (intervalo de tiempo que se le asigna a un proceso para que se ejecute);
 por ejemplo, ejecuta el proceso A.
 El 
\emph on
scheduler
\emph default
 de 
\emph on
threads
\emph default
 dentro del proceso A decide qué 
\emph on
thread
\emph default
 ejecutar, por ejemplo A1.
 Este 
\emph on
thread
\emph default
 se ejecutará tanto como él quiera (ya que los 
\emph on
threads
\emph default
 no son interrumpidos), hasta que se consuma el 
\emph on
quantum
\emph default
, y el kernel decida tomar otro proceso para ejecutar.
 Cuando el proceso A vuelva a ser ejecutado, el 
\emph on
thread
\emph default
 A1 continuará hasta volver a consumir todo el quantum del proceso, o hasta
 que termine su trabajo.
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
El kernel toma un 
\emph on
thread
\emph default
 y lo ejecuta.
 No tiene en cuenta a qué proceso pertenece dicho 
\emph on
thread
\emph default
.
 Al 
\emph on
thread
\emph default
 se le da un 
\emph on
quantum
\emph default
, y es forzado a suspenderse en caso de exceder dicho intervalo de tiempo.
 El kernel sabe que cambiar entre dos 
\emph on
threads
\emph default
 pertenecientes a distintos procesos es más costoso que si los 
\emph on
threads
\emph default
 pertenecen al mismo proceso (porque se requiere de un 
\emph on
context
\emph default
 switch completo).
 Por lo tanto, puede tener en cuenta esta información para decidir qué thread
 ejecutar en un determinado momento.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(-) Si un 
\emph on
thread 
\emph default
comienza su ejecución, ningún otro 
\emph on
thread 
\emph default
va a correr en CPU hasta que el primero la ceda voluntariamente
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(+) El kernel le puede sacar tiempo de CPU para otorgárselo a otro 
\emph on
thread
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(-)
\emph on
 
\emph default
Si un 
\emph on
thread
\emph default
 realiza una 
\emph on
system
\emph default
 
\emph on
call
\emph default
 bloqueante, los otros 
\emph on
threads
\emph default
 en el proceso no pueden correr hasta que la llamada termine
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(+) Los 
\emph on
threads
\emph default
 no requieren 
\emph on
system
\emph default
 
\emph on
calls
\emph default
 no bloqueantes.
 Cuando un 
\emph on
thread
\emph default
 bloquea, el kernel puede correr otro 
\emph on
thread
\emph default
, tanto del mismo proceso como de otro
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(+) Se puede hacer 
\emph on
switching 
\emph default
de un 
\emph on
thread
\emph default
 a otro sin necesidad de usar 
\emph on
traps, 
\emph default
que son muy costosos.
 Se puede implementar el propio algoritmo de planificación de hilos
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(-) Costo elevado para crear y destruir 
\emph on
threads
\emph default
.
 (Se puede implementar 
\begin_inset Quotes eld
\end_inset

reciclado de 
\emph on
threads
\emph default

\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(+) Pueden ser implementados en un sistema operativo que no soporta 
\emph on
threads
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(-) Cuando un proceso con 
\emph on
multithreading
\emph default
 realiza un 
\emph on
fork
\emph default
, ¿cuántos 
\emph on
threads
\emph default
 debe tener el proceso nuevo?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(-) No se beneficia de procesadores multihilo ni multiprocesadores: nunca
 hay más de un 
\emph on
thread
\emph default
 executándose al mismo tiempo.
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(-) Si un proceso recibe una señal, ¿qué 
\emph on
thread
\emph default
 debe manejarla?
\begin_inset Foot
status open

\begin_layout Plain Layout
Las señales son enviadas a los procesos.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Implementación de 
\emph on
threads
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Sistemas operativos móviles
\end_layout

\begin_layout Subsection
Android
\end_layout

\begin_layout Description
Capas
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

la
\begin_inset space ~
\end_inset

arquitectura
\end_layout

\begin_layout Enumerate

\emph on
Applications
\emph default
 (
\emph on
home
\emph default
, 
\emph on
contacts
\emph default
, 
\emph on
phone
\emph default
, 
\emph on
browser
\emph default
)
\end_layout

\begin_layout Enumerate

\emph on
Frameworks (Activity Manager, Window Manager, Package Manager, Telephone
 Manager...)
\end_layout

\begin_layout Enumerate

\emph on
Libraries
\emph default
 (OpenGL, SSL, SQLite...) + 
\emph on
Android
\emph default
 
\emph on
Runtime
\emph default
 (Dalvik VM
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Los programas se escriben en Java, se compilan para generar 
\emph on
bytecode
\emph default
, y se convierten de archivos .class a archivos .dex (Dalvik Executable).
\end_layout

\end_inset

)
\end_layout

\begin_layout Enumerate

\emph on
Linux Kernel (drivers)
\end_layout

\begin_layout Description
Aplicación corre en su propio proceso con su propia copia de Dalvik.
 Vienen empaquetados en un 
\series bold
apk
\series default
.
 
\emph on
An APK file contains all of that program's code (such as .dex files), resources,
 assets, certificates, and manifest file.
 
\end_layout

\begin_deeper
\begin_layout Standard
Una vez que se instala la aplicación, tiene su
\emph on
 sandbox
\emph default
.
 Cada apk es un usuario de Linux con permisos y directorios propios.
\end_layout

\begin_layout Standard
Para mantener la respuesta del sistema, Android puede matar sin previo aviso
 a un proceso y las aplicaciones contenidas.
\end_layout

\end_deeper
\begin_layout Description
Componentes
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

una
\begin_inset space ~
\end_inset

aplicación descriptos en el archivo 
\emph on
AndroidManifest.xml
\emph default
.

\emph on
 
\emph default
Se activan con un mensaje llamado 
\emph on
Intent
\emph default
.
\end_layout

\begin_layout Enumerate

\series bold
\emph on
Activities
\series default
: An activity represents a single screen with a user interface.
 For example, an email application might have one activity that shows a
 list of new emails, another activity to compose an email, and another activity
 for reading emails.
 Although the activities work together to form a cohesive user experience
 in the email application, each one is independent of the others.

\emph default
 Solo puede haber una 
\emph on
activity
\emph default
 activa a la vez, el resto se guarda en un 
\emph on
stack
\emph default
.
 La prioridad de una 
\emph on
activity
\emph default
 se determina mediante su proceso.
 El programador extiende de la clase 
\emph on
Activity
\emph default
 y programa los eventos a los que responde.
\end_layout

\begin_deeper
\begin_layout Standard

\emph on
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/android prioridades.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout

\emph on
\begin_inset Caption

\begin_layout Plain Layout
Prioridades de una 
\emph on
activity
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ciclo de vida:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\emph on
Active
\emph default
: está al tope de la 
\emph on
stack
\emph default
, interactuando con el usuario.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\emph on
Paused
\emph default
: está visible, pero sin foco.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\emph on
Stopped
\emph default
: está en memoria pero ya terminó.
 Es candidata al 
\emph on
kill.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\emph on
Inactive
\emph default
: no está en memoria.
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
\emph on
Services
\series default
: A service is a component that runs in the background to perform long-running
 operations or to perform work for remote processes.
 A service does not provide a user interface.
 For example, a service might play music in the background while the user
 is in a different application, or it might fetch data over the network
 without blocking user interaction with an activity.
\end_layout

\begin_layout Enumerate

\series bold
\emph on
Content providers
\series default
: A content provider manages a shared set of application data.
 You can store the data in the file system, an SQLite database, on the web,
 or any other persistent storage location your application can access.
 Through the content provider, other applications can query or even modify
 the data (if the content provider allows it).
 For example, the Android system provides a content provider that manages
 the user's contact information.
 As such, any application with the proper permissions can query part of
 the content provider (such as ContactsContract.Data) to read and write informati
on about a particular person.
\end_layout

\begin_layout Enumerate

\series bold
\emph on
Broadcast receivers
\series default
: A broadcast receiver is a component that responds to system-wide broadcast
 announcements.
 Many broadcasts originate from the system—for example, a broadcast announcing
 that the screen has turned off, the battery is low, or a picture was captured.
 Applications can also initiate broadcasts—for example, to let other application
s know that some data has been downloaded to the device and is available
 for them to use.
 Although broadcast receivers don't display a user interface, they may create
 a status bar notification to alert the user when a broadcast event occurs.
 A broadcast receiver is implemented as a subclass of BroadcastReceiver
 and each broadcast is delivered as an Intent object.
\end_layout

\begin_layout Subsection
iOS
\end_layout

\begin_layout Standard
Presenta cuatro capas de abstracción:
\end_layout

\begin_layout Enumerate

\series bold
\emph on
Cocoa
\series default
 
\series bold
Touch
\series default
: provides the key frameworks for developing applications on devices running
 iOS.
 Some of these key frameworks are: AirDrop (lets users share photos, documents
 and other data with nearby devices), TextKit (set of classes for handling
 text and fine typography), Multitasking, Storyboards (way of designing
 an app's user interface), Gesture recognizers
\end_layout

\begin_layout Enumerate

\series bold
\emph on
Media
\series default
:
\emph default
 manejo de audio, video y gráficos.
\end_layout

\begin_layout Enumerate

\series bold
\emph on
Core
\series default
 
\series bold
Services
\series default
: 
\emph default
servicios fundamentales utilizados por las aplicaciones (iCloud, SQLite,
 XML...)
\end_layout

\begin_layout Enumerate

\series bold
\emph on
Core
\series default
 
\series bold
OS
\series default
\emph default
: frameworks de bajo nivel (
\emph on
Accelerate, Core Bluetooth, Security, System...
\emph default
)
\end_layout

\begin_layout Standard
Los procesos corren bajo dos UIDs: root (0) y mobile (501).
 Al pasar al 
\emph on
background
\emph default
, los procesos quedan en estado suspendido y no ejecutan más código.
\end_layout

\begin_layout Standard
Apple trata de que no se usen 
\emph on
threads
\emph default
 en forma directa.
 
\emph on
Instead of relying on threads, OS X and iOS take an asynchronous design
 approach to solving the concurrency problem.
 One of the technologies for starting tasks asynchronously is Grand Central
 Dispatch (GCD).
 It is an implementation of task parallelism based on the thread pool pattern.
 GCD works by allowing specific tasks in a program that can be run in parallel
 to be queued up for execution and, depending on availability of processing
 resources, scheduling them to execute on any of the available processor
 cores.
 Grand Central Dispatch still uses threads at the low level but abstracts
 them away from the programmer, who will not need to be concerned with as
 many details.
\end_layout

\begin_layout Section
Memoria
\end_layout

\begin_layout Description
Problema
\begin_inset space ~
\end_inset

del
\begin_inset space ~
\end_inset

direccionamiento
\begin_inset space ~
\end_inset

absoluto cuando un programa hace referencia a la memoria física absoluta,
 se pueden crear problemas.
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Protección
\series default
: Puede estropearse el sistema operativo.
\end_layout

\begin_layout Itemize

\series bold
Reubicación
\series default
: Es difícil tener varios programas en ejecución a la vez.
\end_layout

\begin_layout Description

\series medium
Soluciones:
\end_layout

\begin_layout Itemize

\series bold
Reubicación estática
\series default
: modificar el programa a medida que se carga en memoria.
 Para ello se necesita información adicional en los programas, para indicar
 qué es una dirección (reubicable) y qué es una constante.
\end_layout

\begin_layout Itemize

\series bold
Reubicación dinámica
\series default
: asociar el espacio de direcciones de cada proceso sobre una parte distinta
 de la memoria física.
 Formas de implementación:
\end_layout

\begin_deeper
\begin_layout Itemize
Registros base (
\begin_inset Formula $b$
\end_inset

) y límite (
\begin_inset Formula $l$
\end_inset

): cuando un proceso referencia una dirección absoluta 
\begin_inset Formula $x$
\end_inset

, la CPU verifica que 
\begin_inset Formula $b+x<l$
\end_inset

.
 
\begin_inset Formula $b$
\end_inset

 es la dirección física donde empieza el programa en memoria, y 
\begin_inset Formula $l$
\end_inset

 es la longitud del programa.
\end_layout

\end_deeper
\end_deeper
\begin_layout Description
Problema
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

la
\begin_inset space ~
\end_inset

sobrecarga
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

memoria cuando un programa (o varios) son muy grandes y no caben completamente
 en la memoria.
\end_layout

\begin_deeper
\begin_layout Standard
Soluciones:
\end_layout

\begin_layout Itemize

\series bold
\emph on
Swapping
\series default
:
\emph default
 ubicar cada proceso completo en memoria, dejar que este corra un tiempo,
 y luego ubicarlo en el disco.
 Los procesos inactivos se encuentran en el disco, para que no consuman
 memoria innecesaria.
 Problemas:
\end_layout

\begin_deeper
\begin_layout Itemize
Cuando por 
\emph on
swapping
\emph default
 se producen múltiples agujeros en la memoria, dichos agujeros se pueden
 combinar mediante una técnica (costosa) llamada 
\series bold
compactación de memoria
\series default
.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Memoria virtual
\series default
: permitir que un proceso se ejecute aun cuando solo se encuentra en la
 memoria de forma parcial.
\end_layout

\begin_layout Itemize

\series bold
Sobrepuestos (
\emph on
Overlays
\emph default
)
\series default
: la construcción del programa consiste en dividir manualmente el mismo
 en bloques auto contenidos, dispuestos como una estructura de árbol.
\end_layout

\end_deeper
\begin_layout Description
Espacio
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

direcciones abstracción de la memoria física.
 Representa un conjunto de direcciones que un proceso puede utilizar.
\end_layout

\begin_layout Subsection
Variables
\end_layout

\begin_layout Itemize

\series bold
Declarar
\series default
 una variable: introducir el identificador.
\end_layout

\begin_layout Itemize

\series bold
Definir
\series default
 una variable: asignarle memoria y posiblemente un valor inicial.
\end_layout

\begin_layout Itemize

\series bold
Ambiente
\series default
: porción de código durante el cual una variable está declarada.
\end_layout

\begin_layout Itemize

\series bold
Vida
\series default
 (
\series bold
\emph on
Lifespan
\series default
\emph default
): intervalo de ejecución en el que una variable tiene memoria asignada.
\end_layout

\begin_layout Itemize

\series bold
Ámbito
\series default
 (
\series bold
\emph on
Scope
\series default
\emph default
): variable en su ambiente y en su tiempo de vida.
\end_layout

\begin_deeper
\begin_layout Standard

\emph on
What happens to local variables when they go out of scope? Nothing physical
 happens.
 The memory formerly occupied by the variable continues to remain reserved
 in the stack until the function exits.
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

void function()
\end_layout

\begin_layout Plain Layout

{ // comienza el ambiente
\end_layout

\begin_layout Plain Layout

	list* lista; 							// declaracion
\end_layout

\begin_layout Plain Layout

	lista = NULL;							// definicion
\end_layout

\begin_layout Plain Layout

	while (true)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		lista = (lista*)malloc(100);		// comienzo de lifespan
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		//....
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

		free(lista);						// fin de lifespan
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} // fin de ambiente
\end_layout

\end_inset


\end_layout

\begin_layout Description
Tipos
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

variables
\end_layout

\begin_layout Itemize

\series bold
Externas
\series default
: se declara pero no se define en el bloque.
\end_layout

\begin_layout Itemize

\series bold
Estáticas
\series default
: su vida se extiende a la duración de todo el programa.
\end_layout

\begin_layout Itemize

\series bold
Dinámica
\series default
 
\series bold
automática
\series default
.
 Se manejan con un 
\emph on
stack
\emph default
.
\end_layout

\begin_layout Itemize

\series bold
Dinámica
\series default
 
\series bold
controlada
\series default
: se manejan con un 
\emph on
heap
\emph default
.
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Sincrónico
\series default
: liberación manual con 
\family typewriter
free
\family default
, 
\family typewriter
delete
\end_layout

\begin_layout Itemize

\series bold
Asincrónico
\series default
: con el 
\emph on
garbage collector
\end_layout

\end_deeper
\begin_layout Subsection
Administración de memoria libre
\end_layout

\begin_layout Standard

\emph on
Since the precise location of the allocation is not known in advance, the
 memory is accessed indirectly, usually through a pointer reference.
 The specific algorithm used to organize the memory area and allocate and
 deallocate chunks is interlinked with the kernel, and may use any of the
 following methods:
\end_layout

\begin_layout Itemize
Bloques de tamaño fijo: usa una lista de bloques libres en memoria.
 
\end_layout

\begin_layout Itemize

\emph on
Buddy blocks
\emph default
: la memoria se asigna en cantidades potencias de dos.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/buddy_system.PNG
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Buddy blocks.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="5cm">
<column alignment="center" valignment="top" width="5cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Bloques de tamaño fijo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Buddy blocks
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ventajas
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
Buena performance.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
Permite una recuperación rápida de huecos grandes.
\end_layout

\begin_layout Itemize
Implementación sencilla.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Desventajas
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
Sufre de fragmentación.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
Sufre de fragmentación interna.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Algoritmos de alojamiento: 
\end_layout

\begin_layout Itemize

\emph on
Best fit (
\emph default
buscar el hueco más ajustado) 
\end_layout

\begin_layout Itemize

\emph on
Worst fit 
\emph default
(buscar el hueco más holgado) 
\end_layout

\begin_layout Itemize

\emph on
First fit
\emph default
 (buscar el primer hueco en que quepa)
\end_layout

\begin_layout Subsection
Memoria virtual
\end_layout

\begin_layout Description
Memoria
\begin_inset space ~
\end_inset

virtual mecanismo diseñado para correr programas que son tan grandes que
 no caben en memoria.
\end_layout

\begin_layout Description
Paginado es la herramienta más simple para eliminar el requisito de memoria
 física contigua.
\end_layout

\begin_layout Standard
El programa se divide lógicamente en partes de tamaño fijo llamadas 
\series bold
páginas
\series default
.
 Esta división es invisible para el usuario.
 Cada página es un rango continuo de direcciones.
 Estas páginas son mapeadas en memoria física, pero no todas las páginas
 deben estar en memoria para correr el programa.
 Cuando el programa referencia a una parte de su espacio de direcciones
 que no está en la memoria física, se produce un 
\series bold
\emph on
page fault
\series default
\emph default
: el sistema operativo recibe una alerta para bucar la página faltante y
 volver a ejecutar la instrucción que falló.
\end_layout

\begin_layout Standard
La memoria RAM se divide en partes de tamaño fijo llamados 
\series bold
\emph on
frames
\series default
\emph default
.
 El tamaño de página es igual al tamaño de 
\emph on
frame
\emph default
.
\end_layout

\begin_layout Standard
Los programas referencian la memoria mediante 
\series bold
direcciones virtuales
\series default
.
 Esta dirección contiene un índice (número de página) y un 
\emph on
offset
\emph default
 (dentro de esa página).
 Pero el hardware solo entiende de 
\series bold
direcciones físicas
\series default
.
 Por lo tanto, la traducción de dirección virtual a real se realiza mediante
 la 
\series bold
\emph on
Memory
\series default
 
\series bold
Management
\series default
 
\series bold
Unit
\series default
 
\emph default
(MMU)
\emph on
.
 
\emph default
La MMU puede encontrarse en el CPU o cerca del mismo.
\end_layout

\begin_layout Standard
Esta traducción puede ser lenta, por lo que se utiliza un 
\series bold
\emph on
Translation Lookaside Buffer
\series default
\emph default
 (TLB).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/tlb.PNG
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
TLB
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
La TLB es un cache (generalmente se encuentra dentro de la MMU) que contiene
 las últimas traducciones realizadas por la MMU.
 Se utiliza para no tener que acceder a la tabla de páginas, ya que ésta
 se encuentra en memoria.
 Hay 
\emph on
hit
\emph default
 cuando el numero de página que viene en la dirección virtual existe en
 la TLB, y hay un 
\emph on
miss
\emph default
 cuando no está.
\end_layout

\begin_layout Standard
Cómo funciona la TLB: 
\end_layout

\begin_layout Enumerate
Cuando una dirección virtual se presenta en la MMU, el 
\emph on
hardware
\emph default
 chequea si el 
\emph on
virtual
\emph default
 
\emph on
page
\emph default
 
\emph on
number
\emph default
 se encuentra en la TLB, comparando todas las entradas simultáneamente.
 
\end_layout

\begin_layout Enumerate
Si es así, y el acceso no viola los bits de protección, el 
\emph on
page
\emph default
 
\emph on
frame
\emph default
 es extraído directamente de la TLB sin usar la 
\emph on
page
\emph default
 
\emph on
table
\emph default
.
\end_layout

\begin_layout Enumerate
Si la página está presente pero hay una violación de permisos, se produce
 un 
\emph on
protection
\emph default
 
\emph on
fault
\emph default
 tal como hubiera ocurrido con la 
\emph on
page
\emph default
 
\emph on
table
\emph default
.
 
\end_layout

\begin_layout Enumerate
Si la página no se encuentra, la MMU hace una búsqueda ordinaria en la 
\emph on
page
\emph default
 
\emph on
table
\emph default
:
\end_layout

\begin_deeper
\begin_layout Enumerate
Si la página solicita no está en la 
\emph on
page table
\emph default
, se produce un 
\emph on
page fault
\emph default
.
\end_layout

\begin_deeper
\begin_layout Enumerate
Se selecciona un 
\emph on
frame
\emph default
 que se utilice poco.
\end_layout

\begin_layout Enumerate
Si está 
\begin_inset Quotes eld
\end_inset

sucio
\begin_inset Quotes erd
\end_inset

, se escribe dicho 
\emph on
frame
\emph default
 en el disco.
 Si está limpio, simplemente se lo borra.
\end_layout

\begin_layout Enumerate
Se obtiene la página del disco y se la guarda en el 
\emph on
frame
\emph default
 que se acaba de liberar.
\end_layout

\begin_layout Enumerate
Luego sobrescribe alguna entrada de la TLB con la nueva página solicitada.
\end_layout

\begin_layout Enumerate
Se reinicia la instrucción que originó el 
\emph on
page fault
\emph default
.
\end_layout

\end_deeper
\end_deeper
\begin_layout Description

\emph on
Working
\begin_inset space ~
\end_inset

Set
\emph default
 es el set de páginas que un proceso está utilizando en ese momento.
 Si un proceso tiene la totalidad de su 
\emph on
working
\emph default
 
\emph on
set
\emph default
 en memoria, el mismo podrá ejecutarse sin producir ningún 
\emph on
page
\emph default
 
\emph on
fault.
\end_layout

\begin_layout Description

\emph on
Thrashing
\emph default
 fenómeno que se produce cuando hay poco espacio en la memoria, y se produce
 un 
\emph on
page fault
\emph default
 por cada instrucción.
 El proceso pasa más tiempo paginando que ejecutándose.
\end_layout

\begin_layout Subsubsection
Tabla de páginas 
\begin_inset Quotes eld
\end_inset

directa
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Se mantiene una 
\series bold
tabla de páginas
\series default
 en memoria, que contiene una entrada por cada página.
 La tabla se indexa por número de página; por lo tanto, no almacena el número
 de página.
 Esta tabla suele ser muy grande, por lo que no se la almacena en memoria.
 
\series bold
Cada proceso necesita su propia tabla de páginas.
\end_layout

\begin_layout Standard
El mapeo se lleva a cabo de la siguiente forma: 
\end_layout

\begin_layout Enumerate
Con los primeros 
\begin_inset Formula $n$
\end_inset

 bits de la dirección virtual (
\emph on
virtual
\emph default
 
\emph on
page
\emph default
) se accede a la correspondiente entrada en la 
\emph on
page
\emph default
 
\emph on
table
\emph default
.
 
\end_layout

\begin_layout Enumerate
Dada la entrada, se verifica si el 
\emph on
page
\emph default
 
\emph on
frame
\emph default
 correspondiente a dicha virtual page se encuentra en memoria.
\end_layout

\begin_deeper
\begin_layout Enumerate
De ser así, la dirección física en memoria se obtiene concatenando el número
 de 
\emph on
page
\emph default
 
\emph on
frame
\emph default
 y el 
\emph on
offset
\emph default
.
 
\end_layout

\begin_layout Enumerate
En caso de no encontrarse en memoria el 
\emph on
page
\emph default
 
\emph on
frame
\emph default
 (
\emph on
page
\emph default
 
\emph on
fault
\emph default
), es necesario leerlo de disco.
 Previamente debe elegirse otro 
\emph on
page
\emph default
 
\emph on
frame
\emph default
 (que no haya sido usado recientemente), grabarlo en disco (si fue modificado),
 para escribir el nuevo 
\emph on
page
\emph default
 
\emph on
frame
\emph default
 en ese lugar de memoria.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/page_table_direct.PNG
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Tabla de páginas directa
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cada entrada contiene los siguientes campos:
\end_layout

\begin_layout Itemize

\series bold
\emph on
The Frame Number
\series default
.
 This field is the main reason for the table.
 It gives the virtual to physical address translation.
 It is the only field in the page table for (non-demand) paging.
 
\end_layout

\begin_layout Itemize

\series bold
\emph on
The Valid bit
\series default
.
 This tells if the page is currently loaded (i.e., is in a frame).
 If set, the frame number is valid.
 If a page is accessed whose valid bit is unset, a page fault is generated
 by the hardware.
\end_layout

\begin_layout Itemize

\series bold
\emph on
The Modified or Dirty bit
\series default
.
 Indicates that some part of the page has been written since it was loaded.
 This is needed when the page is evicted so that the OS can tell if the
 page must be written back to disk.
 
\end_layout

\begin_layout Itemize

\series bold
\emph on
The Referenced bit
\series default
.
 Indicates that some word in the page has been referenced.
 Used to select a victim: unreferenced pages make good victims by the locality
 property.
\end_layout

\begin_layout Itemize

\series bold
\emph on
Protection bits
\series default
.
 For example one can mark text pages as execute only.
 This requires that boundaries between regions with different protection
 are on page boundaries.
 Normally many consecutive (in logical address) pages have the same protection
 so many page protection bits are redundant.
 Protection is more naturally done with segmentation, but in many current
 systems, it is done with paging (since the systems don't utilize segmentation,
 even though the hardware supports it).
\end_layout

\begin_layout Subsubsection
Tablas de páginas 
\begin_inset Quotes eld
\end_inset

invertida
\begin_inset Quotes erd
\end_inset

 y 
\begin_inset Quotes eld
\end_inset

multinivel
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Paragraph
Tabla de páginas 
\begin_inset Quotes eld
\end_inset

invertida
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Contiene una entrada por cada 
\emph on
frame
\emph default
.
 Cada entrada lleva el registro de quién (prceso, página virtual) se encuentra
 en dicho 
\emph on
frame
\emph default
.
\end_layout

\begin_layout Standard
La traducción de dirección virtual a dirección física es mucho más difícil.
 Cuando el proceso 
\begin_inset Formula $n$
\end_inset

 hace referencia la página 
\begin_inset Formula $p$
\end_inset

, el hardware debe buscar una entrada 
\begin_inset Formula $(n,p)$
\end_inset

 en 
\series bold
toda
\series default
 la tabla de páginas invertida.
 Esta búsqueda debe hacerse en cada referencia a memoria, no solo en los
 
\emph on
page fault
\emph default
.
 Para solucionar esto, puede tenerse una tabla de hash arreglada según el
 hash de la dirección virtual.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/inverted_page_table.PNG
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Acceso con tabla de páginas invertida
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/inverted_page_table_hash.PNG

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Tabla de páginas invertida indexada por hash
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Tabla de páginas invertida
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Tabla de páginas 
\begin_inset Quotes eld
\end_inset

multinivel
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Dado que el espacio de direcciones virtuales puede ser muy grande la 
\emph on
page
\emph default
 
\emph on
table
\emph default
 también resulta serlo.
 En un modelo en el que la tabla se encuentra en su totalidad en memoria,
 esto se traduce en un gasto inmenso de recursos.
 Como solución puede implementarse el uso de 
\series bold
\emph on
Multilevel
\emph default
 
\emph on
Page Table
\emph default
.
\end_layout

\begin_layout Standard
Consiste de una tabla (en memoria) que referencia a todas las tablas (que
 están en memoria o no), y as se pueden agregar mas niveles también.
 Cada vez que se pide una tabla que está en disco, se la deja en memoria
 para acceder más rápidamente a ella.
 
\end_layout

\begin_layout Standard
De la dirección virtual se identifican varios campos que son puntero a tablas
 y el 
\emph on
offset
\emph default
.
 Si suponemos que tenemos 2 niveles, tenemos un campo para la tabla 1, otro
 para la tabla 2 y el 
\emph on
offset
\emph default
.
 Se accede a la tabla 1 mediante el primer campo directamente (como tabla
 directa).
 De allí se obtiene un puntero a tabla 2, que nos indica cuáles de las tablas
 de segundo nivel debemos acceder (y se la carga en memoria).
 Mediante el campo de tabla 2 accedemos a esta segunda tabla, y ahí obtenemos
 la traducción (numero de 
\emph on
frame
\emph default
) y si está en disco o en memoria.
 Con el numero de 
\emph on
frame
\emph default
 y el 
\emph on
offset
\emph default
 obtenemos la dirección física.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/multilevel_page_table.PNG
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Tabla de páginas multinivel
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Algoritmos de paginación
\end_layout

\begin_layout Paragraph
Paginado por demanda
\end_layout

\begin_layout Standard

\emph on
In a system that uses demand paging, the operating system copies a disk
 page into physical memory only if an attempt is made to access it (i.e.,
 if a 
\series bold
page
\series default
 
\series bold
fault
\series default
 occurs).
 It follows that a process begins execution with none of its pages in physical
 memory, and many page faults will occur until most of a process's working
 set of pages is located in physical memory.
\end_layout

\begin_layout Standard

\emph on
When a page fault ocurrs, the system has a lot of work to do:
\end_layout

\begin_layout Enumerate

\emph on
Software trap that blocks the process.
\end_layout

\begin_layout Enumerate

\emph on
Choose a free frame, if one exists.
 What if there is no free frame? Make one! Choose a victim frame.
 Write the victim back to disk if it is dirty.
 Update the victim PTE to show that it is not loaded.
 Now we have a free frame.
 
\end_layout

\begin_layout Enumerate

\emph on
Copy the referenced page from disk to the free frame.
 
\end_layout

\begin_layout Enumerate

\emph on
Update the PTE of the referenced page to show that it is loaded and give
 the frame number.
 
\end_layout

\begin_layout Enumerate

\emph on
Do the standard paging address translation (p#,off)→(f#,off).
\end_layout

\begin_layout Paragraph
Pre-paginado
\end_layout

\begin_layout Standard

\emph on
A technique whereby the operating system in a paging virtual memory multitasking
 environment loads all pages of a process's working set into memory before
 the process is restarted.
\end_layout

\begin_layout Standard

\emph on
Under demand paging a process accesses its working set by page faults every
 time it is restarted.
 Under prepaging the system remembers the pages in each process's working
 set and loads them into physical memory before restarting the process.
 Prepaging reduces the page fault rate of reloaded processes and hence generally
 improves CPU efficiency.
\end_layout

\begin_layout Subsubsection
Algoritmos de reemplazo de páginas
\end_layout

\begin_layout Itemize

\series bold
Óptimo
\series default
: elegir la página que se referencia más tarde.
 Es imposible de llevar a la práctica porque no se suele saber cuándo se
 va a referenciar una página, a menos que el proceso se ejecute dos veces
 y se saquen estadísticas en la primera corrida.
\end_layout

\begin_layout Itemize

\series bold
\emph on
Not Recently Used 
\emph default
(NRU)
\series default
: a cada página se le asocian dos bits de estado:
\end_layout

\begin_deeper
\begin_layout Itemize
R: se setea en 1 cuando se referencia la página (lectura o escritura)
\end_layout

\begin_layout Itemize
M: se setea en 1 cuando se escribe en la página (se modifica)
\end_layout

\begin_layout Standard
El bit R se borra en cada interrupción de reloj para diferenciar las páginas
 a las que no se ha hecho referencia recientemente.
\end_layout

\begin_layout Standard
Cuando ocurre un 
\emph on
page fault
\emph default
, el sistema operativo inspecciona todas las páginas y las divide en 4 categoría
s con base en los valores actuales de sus bits R y M:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clase 0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No ha sido referenciada, no ha sido modificada
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clase 1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No ha sido referenciada, ha sido modificada
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clase 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ha sido referenciada, no ha sido modificada
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clase 3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ha sido referenciada, ha sido modificada
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
El algoritmo consiste en eliminar una página al azar de la clase de menor
 numeración que no esté vacía.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\emph on
First In, First Out 
\emph default
(FIFO)
\series default
: el sistema operativo mantiene una lista de todas las páginas actualmente
 en memoria, en donde la llegada más reciente esta en la parte final y la
 menos reciente en la parte frontal.
 En un 
\emph on
page fault
\emph default
, se elimina la página que está en la parte frontal de la lista, y la nueva
 página se agrega al final de la lista.
\end_layout

\begin_deeper
\begin_layout Itemize
Desventaja: podrían descartarse páginas de uso frecuente.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Segunda oportunidad
\series default
: es una modificación al algoritmo FIFO.
 Se inspecciona el bit R de la página más antigua.
 Si es 0, la página es antigua y no se ha utilizado, por lo que se sustituye
 de inmediato.
 Si el bit R es 1, el bit se borra, la página se pone al final de la lista
 de páginas (como si acabara de llegar a la memoria).
\end_layout

\begin_layout Itemize

\series bold
Reloj
\series default
: modificación al algoritmo de segunda oportunidad.
 Se mantienen los 
\emph on
frames
\emph default
 en una lista circular en forma de reloj.
 La manecilla apunta a la página más antigua.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/clock_algorithm.PNG
	scale 70

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Algoritmo del reloj
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\emph on
Least Recently Used 
\emph default
(LRU)
\series default
: cuando ocurre un 
\emph on
page fault
\emph default
, se descarta la página que no se haya utilizado durante la mayor longitud
 de tiempo.
 Para esto es necesario mantener una lista enlazada de todas las páginas
 en memoria.
\end_layout

\begin_layout Section
Linkedición
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/compilacion.PNG
	scale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Compilación, ensamble, linker, loader.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Description
Traducción proceso mediante el cual el código fuente de un programa se convierte
 en código objeto.
 
\end_layout

\begin_deeper
\begin_layout Standard
Si el lenguaje es ensamblador, la traducción es el 
\series bold
ensamblado
\series default
.
\end_layout

\begin_layout Standard
Si el lenguaje es de alto nivel, la traducción es una 
\series bold
compilación
\series default
.
\end_layout

\begin_layout Itemize
El compilador genera una 
\series bold
tabla de relocación 
\series default
(
\series bold
\emph on
relocation
\emph default
 
\emph on
table
\series default
\emph default
), que es una tabla cuyas entradas son punteros a direcciones en el código
 objeto que deben ser modificadas cuando el 
\emph on
loader
\emph default
 relocalice el programa.
\end_layout

\begin_layout Itemize
El compilador genera una 
\series bold
tabla de símbolos 
\series default
(
\series bold
\emph on
symbol table
\series default
\emph default
), que es una lista de 
\begin_inset Quotes eld
\end_inset

items
\begin_inset Quotes erd
\end_inset

 en el archivo objeto que pueden ser utilizados por otros archivos.
 Pueden ser: nombres de funciones, o variables globales.
\end_layout

\end_deeper
\begin_layout Standard
Un 
\series bold
\emph on
object file
\emph default
 
\series default
puede contener tres tipos de 
\series bold
símbolos
\series default
:
\end_layout

\begin_layout Enumerate
Símbolos definidos: le permiten ser llamado por otros módulos,
\end_layout

\begin_layout Enumerate
Símbolos no definidos: le permiten llamar a otros módulos que sí los tienen
 definidos
\end_layout

\begin_layout Enumerate
Símbolos locales: usados internamente para facilitar la relocación.
\end_layout

\begin_layout Description
Linker/Link
\begin_inset space ~
\end_inset

editor programa que toma uno o más programas objeto generados por un compilador
 y los combina en un solo programa ejecutable:
\end_layout

\begin_layout Itemize
Resuelve símbolos
\end_layout

\begin_layout Itemize
Relocaliza código que asume una dirección base específica
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/linking.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Proceso de 
\emph on
link
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
Linkedición proceso de mezclar las direcciones de cada programa objeto en
 un único espacio de direcciones.
\end_layout

\begin_deeper
\begin_layout Standard
Entradas posibles: ejecutables, programa objeto, biblioteca estática.
\end_layout

\begin_layout Standard
Salidas posibles: ejecutables, programa objeto, biblioteca.
\end_layout

\begin_layout Description
Procedimiento 
\end_layout

\begin_layout Enumerate
Tomar el TXT de cada .o y ponerlos juntos.
\end_layout

\begin_layout Enumerate
Tomar el DATA de cada .o y ponerlos juntos, al final de los TXT.
\end_layout

\begin_layout Enumerate
Resolver referencias con la tabla de relocación
\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/compilacion y linkeo.png
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Procedimiento de compilación y linkedición
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Description

\emph on
Loader 
\emph default
parte de un sistema operativo que es el responsable de cargar programas
 en memoria para ser ejecutados.
 
\end_layout

\begin_deeper
\begin_layout Standard
El 
\emph on
loader
\emph default
 de Linux hace las siguientes tareas:
\end_layout

\begin_layout Enumerate
Validación (permisos, requisitos de memoria, etc.)
\end_layout

\begin_layout Enumerate
Copiar la imagen del programa del disco a la memoria principal
\end_layout

\begin_layout Enumerate
Copiar los argumentos por línea de comandos a la 
\emph on
stack
\end_layout

\begin_layout Enumerate
Inicializar registros (el 
\emph on
stack pointer
\emph default
, entre otros)
\end_layout

\begin_layout Enumerate
Bifurcar al punto de entrada del programa (
\emph on
_start
\emph default
)
\end_layout

\end_deeper
\begin_layout Description

\emph on
Binding
\emph default
 proceso de resolver las llamadas a funciones de biblioteca.
 Puede darse en tiempo de compilación, en tiempo de carga, en tiempo de
 ejecución.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/loader.PNG
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\emph on
Loader
\emph default
 y 
\emph on
binding
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\emph on
Object File Formats
\end_layout

\begin_layout Description

\emph on
Object
\begin_inset space ~
\end_inset

File
\begin_inset space ~
\end_inset

Format
\begin_inset space ~
\end_inset

(OFF)
\emph default
 formato de archivo utilizado para el almacenamiento de código objeto e
 información relacionada.
\end_layout

\begin_deeper
\begin_layout Itemize
Afectan la performance del linker.
\end_layout

\begin_layout Itemize
Se puede utilizar el mismo formato para ejecutables, objetos y bibliotecas.
\end_layout

\begin_layout Itemize
Que dos sistemas operativos tengan el mismo OFF no significa que los programas
 de uno puedan correr en el otro, porque las llamadas al sistema pueden
 ser distintas.
\end_layout

\begin_layout Itemize
Los OFF soportan el uso de 
\emph on
headers
\emph default
, segmento de texto, segmento de datos, información de relocación, definiciones
 externas, referencias para el 
\emph on
linking
\emph default
 e información de 
\emph on
linking
\emph default
 dinámico.
\end_layout

\end_deeper
\begin_layout Standard
Un 
\emph on
object file
\emph default
 contiene 5 tipos de información: 
\end_layout

\begin_layout Itemize

\series bold
\emph on
Header information
\series default
\emph default
: información general acerca del archivo, tales como el tamaño del código,
 nombre del archivo fuente del cual fue traducido y fecha de creación.
 
\end_layout

\begin_layout Itemize

\series bold
Código objeto
\series default
: instrucciones binarias generada por un compilador o ensamblador.
 
\end_layout

\begin_layout Itemize

\series bold
\emph on
Relocation
\series default
\emph default
 
\series bold
\emph on
table
\series default
\emph default
: una lista de los lugares en el código objeto que tienen que ser modificados
 cuando el linker cambia la dirección del código objeto.
 
\end_layout

\begin_layout Itemize

\series bold
\emph on
Symbol
\series default
\emph default
 
\series bold
\emph on
table
\series default
\emph default
: símbolos globales definidos en el módulo, símbolos a ser importados de
 otros módulos o definidos por el linker.
 
\end_layout

\begin_layout Itemize

\series bold
\emph on
Debugging information
\series default
\emph default
: otra información sobre el código objeto, no necesitada para el linkeo
 pero sí para el uso de un 
\emph on
debugger
\emph default
.
 Esto incluye archivos fuentes e información sobre números de línea, símbolos
 locales, descripción de estructuras de datos usadas por el código objeto,
 tales como definiciones de estructuras de C.
\end_layout

\begin_layout Subsubsection
com (
\emph on
Command File
\emph default
)
\end_layout

\begin_layout Itemize
Creado por Microsoft.
\end_layout

\begin_layout Itemize
No tiene previsión para relocación en memoria.
 No hay tabla de relocación.
 Se cargan en una dirección fija de memoria (0x100).
\end_layout

\begin_layout Itemize
El código y los datos (lo único que tiene el archivo, ya que no hay ni 
\emph on
header
\emph default
 ni metadatos) están en el mismo segmento.
\end_layout

\begin_layout Itemize
Su tamaño máximo es de casi 64 KB.
\end_layout

\begin_layout Subsubsection
exe
\end_layout

\begin_layout Itemize
Creado por Microsoft.
\end_layout

\begin_layout Itemize
Los archivos comienzan con los caracteres 
\begin_inset Quotes eld
\end_inset

MZ
\begin_inset Quotes erd
\end_inset

 (4D 5A), las iniciales del diseñador del formato, Mark Zbikowski.
\end_layout

\begin_layout Itemize
El archivo tiene un 
\emph on
header
\emph default
, la tabla de relocación, y la imagen binaria del TXT.
\end_layout

\begin_layout Subsubsection
coff (
\emph on
Common Object File Format
\emph default
)
\end_layout

\begin_layout Itemize
Creado por Unix.
\end_layout

\begin_layout Itemize
El archivo tiene secciones separadas por 
\emph on
headers
\emph default
.
 El archivo tiene información de 
\emph on
debugging
\emph default
.
\end_layout

\begin_layout Subsubsection
pe (
\emph on
Portable Executable
\emph default
)
\end_layout

\begin_layout Itemize
Versión modificada del formato coff.
\end_layout

\begin_layout Itemize
Tiene definido espacio para 
\emph on
resources 
\emph default
(metadata de solo lectura: (iconos, menús, 
\emph on
bitmaps
\emph default
, 
\emph on
templates
\emph default
, 
\emph on
fonts
\emph default
, etc.)
\end_layout

\begin_layout Itemize
Tiene definido tablas para el uso de bibliotecas compartidas.
\end_layout

\begin_layout Itemize
Hay herramientas de análisis.
\end_layout

\begin_layout Subsubsection
elf (
\emph on
Executable and Linkable Format
\emph default
)
\end_layout

\begin_layout Itemize
Sirve para ejecutables y bibliotecas.
\end_layout

\begin_layout Itemize
Tiene previsiones para emulación.
\end_layout

\begin_layout Section
Bibliotecas
\end_layout

\begin_layout Description
Biblioteca
\begin_inset space ~
\end_inset

(
\emph on
Library
\emph default
) colección de subprogramas usados en el desarrollo de software.
 Contienen 
\begin_inset Quotes eld
\end_inset

código auxiliar
\begin_inset Quotes erd
\end_inset

 que brindan servicios a distintos programas, facilitando la modularización
 del código.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="2cm">
<column alignment="center" valignment="top" width="5cm">
<column alignment="center" valignment="top" width="8cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Biblioteca estática
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Biblioteca dinámica o compartida
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
El link-editor incluye la biblioteca en el ejecutable.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
El link-editor solo indica las llamadas.
 Éstas se resuelven: durante la carga o durante la ejecución.
 
\end_layout

\begin_layout Plain Layout
Pueden cargarse:
\end_layout

\begin_layout Itemize
Antes de 
\emph on
loading
\end_layout

\begin_layout Itemize
En tiempo de 
\emph on
loading
\end_layout

\begin_layout Itemize
En tiempo de ejecución
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ventajas
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
El ejecutable contiene todo lo que se necesita.
 Facilita la portabilidad.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
Las bibliotecas (ejemplo: STL en C++) solo se necesitan guardar en un lugar
 en memoria.
 Por ende, el ejecutable es mucho más pequeño.
\end_layout

\begin_layout Itemize
Si un error en una función de biblioteca se arregla reemplazando la biblioteca,
 todos los programas que la usen dinámicamente se benefician de la corrección
 reiniciándolos (no hace falta re linkear)
\end_layout

\begin_layout Itemize
Las funciones de biblioteca que no son necesarias, no se cargan en memoria.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Desventajas
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
El ejecutable contiene 
\emph on
toda
\emph default
 la biblioteca, incluso si hay partes que no se usarán.
\end_layout

\begin_layout Itemize
Si la biblioteca se actualiza, no obtendremos los beneficios a menos que
 recompilemos con el nuevo código fuente.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
En Windows, una DLL actualizada puede romper ejecutables que dependían del
 funcionamiento de la versión vieja de ese DLL
\end_layout

\begin_layout Itemize
Un programa y las bibliotecas que usa sólo se pueden validar como un paquete,
 no si sus componentes se pueden reemplazar
\end_layout

\begin_layout Itemize
Hay pérdida de tiempo en la ejecución, porque hay que linkear
\end_layout

\begin_layout Itemize
Si la biblioteca no es PIC, deben crearse páginas para cada proceso que
 comparta la biblioteca
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Compilación en Linux
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ld *.o --static libfoo.a
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ld *.o -luno -ldos
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Tipos de bibliotecas
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <windows.h> 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

extern "C" int __cdecl myPuts(LPWSTR);   // a function from a DLL
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(VOID)  
\end_layout

\begin_layout Plain Layout

{     
\end_layout

\begin_layout Plain Layout

	int Ret = 1;
\end_layout

\begin_layout Plain Layout

	// If the system cannot locate a required DLL, it terminates the process
\end_layout

\begin_layout Plain Layout

	// and displays a dialog box that reports the error to the user.
\end_layout

\begin_layout Plain Layout

    Ret = myPuts(L"Message sent to the DLL function
\backslash
n");
\end_layout

\begin_layout Plain Layout

	// The DLL is mapped into the virtual address space of the process 
\end_layout

\begin_layout Plain Layout

	// during its initialization and is loaded into physical memory only when
 needed.
\end_layout

\begin_layout Plain Layout

    return Ret;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Load-Time Dynamic Linking (Windows)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// A simple program that uses LoadLibrary and  
\end_layout

\begin_layout Plain Layout

// GetProcAddress to access myPuts from Myputs.dll.
 
\end_layout

\begin_layout Plain Layout

#include <windows.h>
\end_layout

\begin_layout Plain Layout

#include <stdio.h>  
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef int (__cdecl *MYPROC)(LPWSTR);   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main( void )  {    
\end_layout

\begin_layout Plain Layout

	HINSTANCE hinstLib;     
\end_layout

\begin_layout Plain Layout

	MYPROC ProcAdd;      
\end_layout

\begin_layout Plain Layout

	BOOL fFreeResult, fRunTimeLinkSuccess = FALSE;       
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	// Get a handle to the DLL module.
      
\end_layout

\begin_layout Plain Layout

	hinstLib = LoadLibrary(TEXT("MyPuts.dll"));   
\end_layout

\begin_layout Plain Layout

	// If the handle is valid, try to get the function address.
  
\end_layout

\begin_layout Plain Layout

	if (hinstLib != NULL)      
\end_layout

\begin_layout Plain Layout

	{          
\end_layout

\begin_layout Plain Layout

		ProcAdd = (MYPROC) GetProcAddress(hinstLib, "myPuts");     
\end_layout

\begin_layout Plain Layout

		// If the function address is valid, call the function.
  
\end_layout

\begin_layout Plain Layout

		if (NULL != ProcAdd) 
\end_layout

\begin_layout Plain Layout

		{         
\end_layout

\begin_layout Plain Layout

			fRunTimeLinkSuccess = TRUE;    
\end_layout

\begin_layout Plain Layout

			(ProcAdd) (L"Message sent to the DLL function
\backslash
n");         
\end_layout

\begin_layout Plain Layout

		}         
\end_layout

\begin_layout Plain Layout

		// Free the DLL module.
      
\end_layout

\begin_layout Plain Layout

	    fFreeResult = FreeLibrary(hinstLib);     
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

    // If unable to call the DLL function, use an alternative.
   
\end_layout

\begin_layout Plain Layout

	if (! fRunTimeLinkSuccess)         
\end_layout

\begin_layout Plain Layout

		printf("Message printed from executable
\backslash
n"); 
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Run-Time Dynamic Linking (Windows)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <dlfcn.h> 
\end_layout

\begin_layout Plain Layout

#include "ctest.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(int argc, char **argv)  { 
\end_layout

\begin_layout Plain Layout

	double (*fn)(int *);
\end_layout

\begin_layout Plain Layout

	int x;
\end_layout

\begin_layout Plain Layout

	char *error;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	// Open shared library named "libctest.so".
  
\end_layout

\begin_layout Plain Layout

	// The second argument indicates the binding.
\end_layout

\begin_layout Plain Layout

	void* lib_handle = dlopen("/opt/lib/libctest.so", RTLD_LAZY);
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	if (lib_handle == NULL)
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

		fprintf(stderr, "%s
\backslash
n", dlerror());      
\end_layout

\begin_layout Plain Layout

		exit(1);  
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	// Returns address to the function which has been loaded with the shared
 library.
\end_layout

\begin_layout Plain Layout

	fn = dlsym(lib_handle, "ctest1");
\end_layout

\begin_layout Plain Layout

	if ((error = dlerror()) != NULL)      
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		fprintf(stderr, "%s
\backslash
n", error);
\end_layout

\begin_layout Plain Layout

		exit(1);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	(*fn)(&x);
\end_layout

\begin_layout Plain Layout

	printf("Valx=%d
\backslash
n",x);
\end_layout

\begin_layout Plain Layout

	dlclose(lib_handle);
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Run-Time Dynamic Linking (Linux)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Description

\emph on
Position-independent
\begin_inset space ~
\end_inset

code
\begin_inset space ~
\end_inset

(PIC) 
\emph default
código máquina que al ser ubicado en algun lugar de la memoria, se ejecuta
 correctamente independientemente de su dirección absoluta.
 Se suele utilizar en bibliotecas dinámicas, para que el mismo código pueda
 cargarse en una dirección en cada espacio de usuario de cada proceso.
\end_layout

\begin_deeper
\begin_layout Standard
Un programa PIC puede ejecutarse en cualquier dirección de memoria sin necesidad
 de modificarlo.
 Esto se diferencia del 
\series bold
\emph on
relocatable code
\series default
\emph default
, donde el link-editor o el 
\emph on
loader
\emph default
 deben modificar el programa para que pueda correr una dirección específica.
 El código PIC debe cumplir ciertas reglas y el compilador debe soportarlo.
 Las instrucciones que se refieran a posiciones de memoria especificas deben
 ser reemplazadas por instrucciones relativas.
 La indirección extra puede hacer que el código PIC sea menos eficiente.
\end_layout

\begin_layout Standard

\emph on
Data references from position-independent code are usually made indirectly,
 through 
\series bold
global offset tables (GOTs)
\series default
, which store the addresses of all accessed global variables.
 There is one GOT per compilation unit or object module, and it is located
 at a fixed offset from the code (although this offset is not known until
 the library is linked).
 When a linker links modules to create a shared library, it merges the GOTs
 and sets the final offsets in code.
 It is not necessary to adjust the offsets when loading the shared library
 later.
\end_layout

\begin_layout Standard

\emph on
Microsoft Windows DLLs are not shared libraries in the Unix sense and do
 not use position independent code.
 
\end_layout

\end_deeper
\begin_layout Subsection
Búsqueda de rutinas en bibliotecas
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="6cm">
<column alignment="center" valignment="top" width="6cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Linux
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Windows
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hay una ruta de búsqueda formada por la posición fija indicada en el programa,
 archivo de configuración 
\family typewriter
/etc/ld.so.conf
\family default
, variable de ambiente 
\family typewriter
LD_LIBRARY_PATH
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Los ActiveX se buscan en el registro (registry).
 El resto en el indicado en una llamada a 
\family typewriter
SetDllDirectory()
\family default
, System32, System y Windows 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Virtualización
\end_layout

\begin_layout Description
Virtualización acto de crear una versión virtual (no real) de una cosa
\end_layout

\begin_deeper
\begin_layout Standard
Los sistemas de máquinas virtuales son capaces de virtualizar un conjunto
 completo de recursos de 
\emph on
hardware
\emph default
, incluyendo al procesador (o procesadores), memoria, recursos de almacenamiento
 y dispositivos periféricos.
\end_layout

\begin_layout Standard
Aplicaciones:
\end_layout

\begin_layout Itemize
Aumento de confiabilidad.
\end_layout

\begin_layout Itemize
Ejecución de aplicaciones antiguas.
\end_layout

\begin_layout Itemize
Desarrollo y prueba en múltiples plataformas.
\end_layout

\begin_layout Itemize
Balanceo de cargas y escalabilidad futura.
\end_layout

\end_deeper
\begin_layout Subsection
Tipos de virtualización
\end_layout

\begin_layout Enumerate

\series bold
Virtualización de aplicaciones
\end_layout

\begin_deeper
\begin_layout Standard
Encapsula un software de aplicación del sistema operativo subyacente.
 La aplicación se comporta, en tiempo de ejecución, como si estuviese interactua
ndo directamente con el sistema operativo original y los recursos que éste
 maneja, pero puede ser aislada.
 En este contexto, el término 
\begin_inset Quotes eld
\end_inset

virtualización
\begin_inset Quotes erd
\end_inset

 se refiere al objeto que está siendo encapsulado: la aplicación.
\end_layout

\begin_layout Standard
Ejemplo: 
\emph on
Wine
\emph default
 permite ejecutar aplicaciones de Windows en Linux.
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Virtualización de escritorio
\end_layout

\begin_deeper
\begin_layout Standard
Separa el ambiente de escritorio del dispositivo físico que es utilizado
 para acceder a el.
\end_layout

\begin_layout Standard
Ejemplo: 
\emph on
Remote Desktop
\emph default
.
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Virtualización de recursos
\end_layout

\begin_deeper
\begin_layout Standard
Utilizar los recursos del sistema operativo 
\emph on
host
\emph default
 (red, memoria, almacenamiento...) para apoyar la ejecución del 
\emph on
guest
\emph default
.
 
\end_layout

\begin_layout Standard
Ejemplos:
\end_layout

\begin_layout Itemize
RAID.
\end_layout

\begin_layout Itemize

\emph on
coLinux 
\emph default
permite que los kernels de Windows y Linux correr en paralelo en la misma
 computadora.
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Virtualización del sistema operativo
\end_layout

\begin_deeper
\begin_layout Standard
El kernel de un sistema operativo permite múltiples espacios de usuario
 aislados, los 
\emph on
containers
\emph default
.
 Puede pensarse como una implementación avanzada del mecanismo 
\family typewriter
chroot
\family default
.
 El kernel suele proveer mecanismos de administración de recursos para limitar
 el 
\emph on
impacto de las actividades de un container en otros containers.
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Virtualización de plataforma (
\emph on
hardware
\emph default
)
\end_layout

\begin_deeper
\begin_layout Standard

\emph on
Refers to the creation of a virtual machine that acts like a real computer
 with an operating system.
 Software executed on these virtual machines is separated from the underlying
 hardware resources.
 
\end_layout

\begin_layout Standard

\emph on
The 
\series bold
host
\series default
 machine is the actual machine on which the virtualization takes place,
 and the 
\series bold
guest
\series default
 machine is the virtual machine.
 The software or firmware that creates a virtual machine on the host hardware
 is called a 
\series bold
hypervisor
\series default
 or 
\series bold
Virtual Machine Manager
\series default
.
\end_layout

\begin_layout Standard

\emph on
Different types of hardware virtualization include: 
\end_layout

\begin_layout Itemize

\series bold
\emph on
Full virtualization
\series default
: Almost complete simulation of the actual hardware to allow software, which
 typically consists of a guest operating system, to run unmodified.
 
\end_layout

\begin_layout Itemize

\series bold
\emph on
Partial virtualization
\series default
: Some but not all of the target environment is simulated.
 Some guest programs, therefore, may need modifications to run in this virtual
 environment.
 
\end_layout

\begin_layout Itemize

\series bold
\emph on
Paravirtualization
\series default
: Presents a software interface to virtual machines that is similar, but
 not identical to that of the underlying hardware.
 The intent of the modified interface is to reduce the portion of the guest's
 execution time spent performing operations which are substantially more
 difficult to run in a virtual environment compared to a non-virtualized
 environment.
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
It modifies the guest operating system to eliminate the need for binary
 translation.
\end_layout

\begin_layout Itemize

\emph on
Requires using specially modified operating system kernels.
 Paravirtualization requires the guest operating system to be explicitly
 ported for the para-API.
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsection
Requerimientos de virtualización de Popek y Goldberg
\end_layout

\begin_layout Standard
Son un conjunto de condiciones suficientes para que una arquitectura de
 computadores soporte eficientemente la virtualización.
 Constituyen una manera eficaz de determinar si una arquitectura soporta
 eficientemente la virtualización, y proporciona líneas maestras para el
 diseño de arquitecturas virtualizables.
\end_layout

\begin_layout Standard
Hay tres características de interés cuando se analiza el entorno creado
 por un VMM:
\end_layout

\begin_layout Enumerate

\series bold
Equivalencia / Fidelidad
\series default
 Un programa corriendo bajo el VMM debe exhibir un comportamiento esencialmente
 idéntico a aquel demostrado cuando se ejecuta directamente en una máquina
 equivalente.
 
\end_layout

\begin_layout Enumerate

\series bold
Control de recursos / Seguridad
\series default
 El VMM debe estar en completo control de los recursos virtualizados.
 
\end_layout

\begin_layout Enumerate

\series bold
Eficiencia / Performance
\series default
 Una fracción estadísticamente dominante de las instrucciones de máquina
 debe ser ejecutada sin la intervención del VMM.
\end_layout

\begin_layout Standard
Popek y Goldberg clasifican las instrucciones de un ISA en 3 grupos:
\end_layout

\begin_layout Enumerate

\series bold
Instrucciones privilegiadas
\series default
 generan un 
\emph on
trap
\emph default
 si el procesador se encuentra en modo de usuario pero no lo hacen si se
 encuentra en modo kernel.
\end_layout

\begin_layout Enumerate

\series bold
Instrucciones sensibles 
\series default
solo pueden ejecutarse en modo supervisor del procesador.
\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
de control 
\series default
intentan cambiar la configuración de los recursos en el sistema.
\end_layout

\begin_layout Enumerate

\series bold
de comportamiento
\series default
 su comportamiento o resultado dependen de la configuración de los recursos.
\end_layout

\end_deeper
\begin_layout Quotation

\emph on
Teorema.
 Se puede construir un VMM efectivo si el conjunto de instrucciones sensibles
 es un subconjunto de las instrucciones privilegiadas.
\end_layout

\begin_layout Standard
Para poder virtualizar, la idea es generar “
\emph on
containers
\emph default
” donde la ejecución de una instrucción delicada provoque un software 
\emph on
trap
\emph default
.
\end_layout

\begin_layout Subsection
Hipervisores
\end_layout

\begin_layout Description

\emph on
Hipervisor
\begin_inset space ~
\end_inset

-
\begin_inset space ~
\end_inset

Virtual
\begin_inset space ~
\end_inset

Machine
\begin_inset space ~
\end_inset

Monitor
\emph default

\begin_inset space ~
\end_inset

(VMM) software, firmware o hardware que provee la abstracción de una máquina
 virtual.
 Permite crear y correr máquinas virtuales.
\end_layout

\begin_layout Description
Anfitrión
\begin_inset space ~
\end_inset

(
\emph on
host
\emph default
) computadora en la que un hipervisor esta corriendo una o más máquinas
 virtuales.
\end_layout

\begin_layout Description
Huésped
\begin_inset space ~
\end_inset

(
\emph on
guest
\emph default
) una máquina virtual corriendo en un anfitrión.
\end_layout

\begin_layout Standard
El hipervisor le presenta al sistema operativo huésped una plataforma virtual
 operativa y maneja la ejecución de los sistemas operativos huéspedes.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="2cm">
<column alignment="center" valignment="top" width="7cm">
<column alignment="center" valignment="top" width="7cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Tipo 1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Tipo 2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/hyper1.png
	scale 70

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/hyper2.png
	scale 70

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/hyper1_draw.PNG
	scale 35

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/hyper2_draw.png
	scale 50

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Anfitrión
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
El hipervisor corre directamente en el hardware del anfitrión para controlar
 dicho hardware y administrar los sistemas operativos huéspedes.
 El huésped debe tener una arquitectura virtualizable.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
El hipervisor corre dentro de un sistema operativo convencional.
 El anfitrión puede modificar el programa que está corriendo mediante la
 
\series bold
traducción binaria
\series default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Huésped
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
El sistema operativo huésped corre en modo usuario.
 Su kernel cree haber pasado a modo supervisor, pero continúa en modo usuario.
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
El sistema operativo huésped corre como una tercer capa por encima del hardware.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Ejecución de instrucciones delicadas
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Al ejecutar una instrucción delicada,se produce una 
\emph on
software
\emph default
 
\emph on
trap
\emph default
.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
On most modern CPUs, context-sensitive instructions are Non-Virtualizable.
 
\series bold
Binary
\series default
 
\series bold
translation
\series default
 is a technique to overcome this limitation.
 The sensitive instructions in the binary of Guest OS are replaced by either
 Hypervisor calls which safely handle such sensitive instructions or by
 some undefined opcodes which result in a CPU trap.
 Such a CPU trap is handled by the Hypervisor.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Software ejemplo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hyper-V
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Virtual Box
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Ventajas y desventajas
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(+) El hipervisor corre sobre hardware, no necesita un sistema operativo.
\end_layout

\begin_layout Plain Layout
(+) Se pueden tener muchas VMs en el mismo hardware.
\end_layout

\begin_layout Plain Layout
(-) Requisitos de hardware son estrictos.
\end_layout

\begin_layout Plain Layout
(-) No siempre es más rápido que el tipo 2, ya que los 
\emph on
traps
\emph default
 consumen muchos recursos.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(+) Pueden virtualizar cualquier ambiente.
\end_layout

\begin_layout Plain Layout
(-) No se pueden tener muchas VMs.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Tipos de hipervisores
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Description
Traducción
\begin_inset space ~
\end_inset

binaria emulación de un set de instrucciones por otro set de instrucciones
 mediante la traducción de código.
 
\emph on
In some cases such as instruction set simulation, the target instruction
 set may be the same as the source instruction set, providing testing and
 debugging features such as instruction trace, conditional breakpoints and
 hot spot detection.
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Estática
\series default
: 
\emph on
aims to convert all of the code of an executable file into code that runs
 on the target architecture without having to run the code first.
\end_layout

\begin_layout Itemize

\series bold
Dinámica
\series default
: 
\emph on
looks at a short sequence of code—typically on the order of a single basic
 block—then translates it and caches the resulting sequence.
 A 
\series bold
basic block
\series default
 is a portion of the code within a program with only one entry point and
 only one exit point.
 
\end_layout

\end_deeper
\begin_layout Section
Archivos y Sistemas de archivo
\end_layout

\begin_layout Description
Sistema
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

archivo parte del sistema operativo que administra los archivos.
 Los sistemas de archivos se almacenan en disco.
\end_layout

\begin_deeper
\begin_layout Standard
Presenta dos aspectos:
\end_layout

\begin_layout Itemize
Interfaz de usuario.
 La interfaz exporta la noción de:
\end_layout

\begin_deeper
\begin_layout Itemize
Directorios
\end_layout

\begin_layout Itemize
Archivos
\end_layout

\end_deeper
\begin_layout Itemize
Implementación.
\end_layout

\end_deeper
\begin_layout Subsection
Archivos
\end_layout

\begin_layout Standard
Requerimientos para el almacenamiento de información a largo plazo: 
\end_layout

\begin_layout Itemize
Debe ser posible almacenar mucha información.
 
\end_layout

\begin_layout Itemize
La información debe sobrevivir a la terminación del proceso que la utilice.
 
\end_layout

\begin_layout Itemize
Varios procesos deben ser capaces de acceder a la misma información concurrentem
ente.
 
\end_layout

\begin_layout Description
Archivo unidad lógica de información creada por los procesos.
 Abstrae las propiedades físicas del dispositivo de almacenamiento.
\end_layout

\begin_layout Standard
Tipos de archivos según la función que cumplen: 
\end_layout

\begin_layout Itemize

\emph on
Archivos regulares
\emph default
: contienen información del usuario.
 Pueden ser 
\series bold
ASCII 
\series default
o binarios.
 
\end_layout

\begin_layout Itemize

\emph on
Archivos especiales de caracteres
\emph default
: modelan dispositivos de E/S.
 
\end_layout

\begin_layout Itemize

\emph on
Archivos especiales de bloques
\emph default
: modelan discos.
 
\end_layout

\begin_layout Itemize

\emph on
Archivos especiales de red
\emph default
: para comunicar procesos.
 
\end_layout

\begin_layout Itemize

\emph on
Directorios
\emph default
: mantienen la estructura del sistema de archivos.
 
\end_layout

\begin_layout Standard
Posibles atributos de archivos: 
\end_layout

\begin_layout Itemize
Nombre, ubicación, tamaño, tipo.
\end_layout

\begin_layout Itemize
Atributos de 
\series bold
protección
\series default
: usuarios permitidos, contraseña, creador, propietario.
 
\end_layout

\begin_layout Itemize
Atributos 
\series bold
bandera
\series default
 (binarios): 
\begin_inset Quotes eld
\end_inset

sólo lectura
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

oculto
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

del sistema
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

de archivo
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

ascii/binario
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

de acceso aleatorio
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

temporal
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

de bloqueo
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Itemize
Atributos 
\series bold
extras
\series default
: longitud de registro, posición de la llave en el registro, longitud de
 la llave, hora de creación, hora de último acceso, hora de última modificación,
 tamaño actual, tamaño máximo.
 
\end_layout

\begin_layout Standard
Operaciones posibles en un archivo:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Create
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Open
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Read
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Seek
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Get attributes
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Rename
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Delete
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Close
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Write
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Append
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Set attributes
\family default
 
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="none" valignment="top" topline="true" usebox="none" special="c">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
Create
\family default
 crea un archivo sin datos y establece algunos atributos.
 
\end_layout

\begin_layout Itemize

\family typewriter
Open
\family default
 lleva los atributos y la lista de direcciones de disco a memoria principal.
 Se debe especificar un modo de apertura.
 
\end_layout

\begin_layout Itemize

\family typewriter
Close
\family default
 obliga a escribir el último bloque del archivo (
\emph on
flush
\emph default
).
 
\end_layout

\begin_layout Itemize

\family typewriter
Read
\family default
 requiere tres parámetros: el 
\emph on
file descriptor 
\emph default
(entero que referencia al archivo), cuántos datos se necesitan leer, y dónde
 colocarlos (un buffer).
 
\end_layout

\begin_layout Itemize

\family typewriter
Rename
\family default
 evita tener que copiar el archivo en otro nuevo con el nuevo nombre.
 
\end_layout

\begin_layout Subsection
Directorios
\end_layout

\begin_layout Standard
Tipos de directorio: 
\end_layout

\begin_layout Itemize

\emph on
Directorios jerárquicos
\emph default
, son árboles con uno o más niveles.
 
\end_layout

\begin_layout Itemize

\emph on
Directorio de un solo nivel
\emph default
, que puede simular un directorio jerárquico si a los archivos los nombramos
 como si fueran un directorio.
 Ejemplo: 
\begin_inset Quotes eld
\end_inset


\family typewriter
usr/ast/file
\family default

\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
Nombres de rutas: 
\end_layout

\begin_layout Itemize

\series bold
Absoluto
\series default
: ruta desde el directorio raíz al archivo.
 
\end_layout

\begin_layout Itemize

\series bold
Relativa
\series default
: se utiliza en conjunto con el directorio de trabajo.
 
\end_layout

\begin_layout Standard
Operaciones posibles en un directorio:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Create
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Open
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Read
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Link
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Rename
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Delete
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Close
\family default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Unlink
\family default
 
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="none" valignment="top" topline="true" usebox="none" special="c">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Itemize

\series bold
\emph on
Link
\series default
\emph default
: llamada al sistema que permite a un archivo aparecer en más de un directorio.
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
\emph on
Hard link
\series default
\emph default
: relación bidireccional entre una ruta y un archivo.
 Dos rutas apuntan a la misma estructura que contiene metadatos sobre un
 archivo.
\end_layout

\begin_deeper
\begin_layout Standard
En UNIX BSD: Al hacer un 
\emph on
hard link
\emph default
, se incrementa el contador de 
\emph on
hard links
\emph default
 en el nodo-i del archivo.
 Todos los nodos-i tienen, al menos, 1 en su contador.
 Cuando se borra un 
\emph on
hard link
\emph default
, el contador decrece.
 Cuando el contador llega a cero, el archivo se borra definitivamente.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\emph on
Soft link
\series default
 
\series bold
/ symbolic link
\series default
\emph default
: relación unidireccional entre una ruta y un archivo.
\end_layout

\begin_deeper
\begin_layout Standard
En UNIX BSD: La carpeta original (1) apunta al nodo-i del archivo X.
 El siguiente directorio (2) que quiera tener una referencia al archivo,
 crea un archivo que contiene la ruta del archivo original X.
 Si es borra el archivo X, la ruta (2) tiene un puntero inválido.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/hardlinks_softlinks.jpg
	scale 50

\end_inset

 
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Hard links y soft links
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
Los 
\emph on
hard links
\emph default
 no requieren espacio extra en el disco, y los 
\emph on
soft
\emph default
 
\emph on
links
\emph default
 sí.
\end_layout

\begin_layout Standard
Los 
\emph on
soft links
\emph default
 pueden apuntar a archivos en otras máquinas, en la misma red o por Internet.
 Los 
\emph on
hard
\emph default
 
\emph on
links
\emph default
 solo pueden apuntar a archivos dentro de la misma partición.
\end_layout

\end_deeper
\begin_layout Subsection
Distribución del sistema de archivos
\end_layout

\begin_layout Standard
Ejemplo: UNIX BSD.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/file system distribution.png
	scale 50

\end_inset

 
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Distribución posible de un sistema de archivos
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\series bold
MBR
\series default
 (
\emph on
Master Boot Record
\emph default
): se utiliza para arrancar la computadora.
 
\end_layout

\begin_layout Enumerate

\series bold
Tabla de particiones
\series default
: proporciona las direcciones de inicio y fin de cada partición.
 Proporciona el nombre de la partición activa.
 
\end_layout

\begin_layout Enumerate
Para cada partición:
\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
Boot block
\series default
: contiene el módulo de arranque del sistema operativo de esa partición.
 
\end_layout

\begin_layout Enumerate

\series bold
Superblock
\series default
: contiene todos los parámetros clave acerca del sistema de archivos.
 
\end_layout

\begin_layout Enumerate
Administración del 
\series bold
espacio libre
\series default
: información acerca de los bloques libres, en forma de 
\emph on
bitmap
\emph default
 o una lista de punteros.
 
\end_layout

\begin_layout Enumerate

\series bold
Nodos-i
\series default
: arreglo de estructuras de datos, uno por archivo, que indica todo acerca
 del archivo.
 La cantidad de nodos-i es 
\series bold
fija
\series default
, y se establece al crear la partición.
 
\end_layout

\begin_layout Enumerate
Directorio raíz.
 
\end_layout

\begin_layout Enumerate
Todos los otros directorios y archivos.
 
\end_layout

\end_deeper
\begin_layout Subsection
Implementación de archivos
\end_layout

\begin_layout Standard

\bar under
Objetivo
\bar default
: mantener un registro acerca de qué bloques del disco van con cuál archivo.
 
\end_layout

\begin_layout Standard
Formas: 
\end_layout

\begin_layout Enumerate

\series bold
Asignación contigua
\series default
: almacenar cada archivo como una serie contigua de bloques de disco.
 Cada archivo comienza al inicio de un nuevo bloque, y puede desperdiciarse
 espacio en el último bloque de cada archivo.
\end_layout

\begin_deeper
\begin_layout Standard
Ventajas: 
\end_layout

\begin_layout Enumerate
Es simple de implementar.
 Sólo hay que 
\series bold
guardar
\series default
, por cada archivo, 
\series bold
la dirección de disco del primer bloque y la cantidad de bloques que ocupa
\series default
.
 
\end_layout

\begin_layout Enumerate
El 
\series bold
rendimiento de lectura
\series default
 es excelente.
 El archivo completo se puede leer en una sola operación.
 
\end_layout

\begin_layout Standard
Desventajas: 
\end_layout

\begin_layout Enumerate
Con el tiempo, el disco se 
\series bold
fragmenta
\series default
.
 Cuando se quita un archivo quedan bloques libres, y no se pueden compactar
 en el momento.
\end_layout

\begin_deeper
\begin_layout Standard
Solución posible: mantener una lista de bloques libres.
\end_layout

\begin_layout Standard
Problema de esta solución: cuando se cree un archivo nuevo será necesario
 conocer su tamaño final para poder elegir el hueco apropiado.
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate

\series bold
Asignación de lista enlazada
\series default
: cada archivo es una lista enlazada de bloques de disco.
 La primera palabra del primer bloque del archivo se usa como puntero al
 próximo bloque, hasta llegar a un puntero inválido (fin de archivo).
\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset


\begin_inset Graphics
	filename img/asignacion de lista enlazada.png
	scale 80

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Asignación de lista enlazada.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ventajas: 
\end_layout

\begin_layout Enumerate

\series bold
No se produce fragmentación
\series default
, porque cada bloque se puede aprovechar.
 
\end_layout

\begin_layout Enumerate
La entrada del directorio se reduce a almacenar, para cada archivo, la 
\series bold
dirección de disco del primer bloque
\series default
.
 
\end_layout

\begin_layout Standard
Desventajas: 
\end_layout

\begin_layout Enumerate
La lectura aleatoria es 
\series bold
lenta
\series default
.
 Para llegar al bloque 
\begin_inset Formula $n$
\end_inset

, se necesita leer los 
\begin_inset Formula $n-1$
\end_inset

 bloques anteriores.
 
\end_layout

\begin_layout Enumerate
El puntero ocupa mucho 
\series bold
espacio
\series default
.
 
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
FAT / Asignación de lista enlazada utilizando una tabla en memoria
\series default
: misma estructura anterior, pero los punteros de cada bloque del disco
 se almacenan en una tabla en memoria.
 Esta tabla contiene tantas entradas como bloques de disco haya.
 Cada entrada posee un puntero al bloque siguiente del archivo.
\end_layout

\begin_deeper
\begin_layout Standard
Además se tiene un directorio que, para cada archivo, tiene el número del
 bloque inicial.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset


\begin_inset Graphics
	filename img/fat.png

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
FAT.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ventajas: 
\end_layout

\begin_layout Enumerate
El bloque completo contiene datos.
 
\end_layout

\begin_layout Enumerate
La lectura aleatoria es mucho más rápida, porque la lista enlazada está
 en memoria.
 
\end_layout

\begin_layout Standard
Desventajas: 
\end_layout

\begin_layout Enumerate
Toda la tabla debe estar en la memoria todo el tiempo.
 Con un disco de 200 GB, se requiere una FAT que ocupa 600 MB en memoria.
 
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Nodos-i
\series default
: cada archivo y cada directorio tiene asociado una estructura de datos
 llamada 
\series bold
nodo-i
\series default
.
 Estos son registros de 
\series bold
longitud fija
\series default
 con los siguientes campos
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
El nombre del archivo NO es un campo del nodo-i.
 Se guarda en la entrada del directorio.
\end_layout

\end_inset

:
\end_layout

\begin_deeper
\begin_layout Enumerate
Propietario y grupo del propietario, 
\end_layout

\begin_layout Enumerate
Tipo de archivo (regular, directorio, de caracteres, de red, de bloque)
 
\end_layout

\begin_layout Enumerate
Permisos de acceso (9 bits), 
\end_layout

\begin_layout Enumerate
Fechas de acceso y modificación, 
\end_layout

\begin_layout Enumerate
Cantidad de registros del directorio que referencian al nodo-i (contador
 de 
\emph on
hardlinks
\emph default
)
\end_layout

\begin_layout Enumerate
Tamaño del archivo en bytes, 
\end_layout

\begin_layout Enumerate
Lista de bloques de almacenamiento del archivo:
\end_layout

\begin_deeper
\begin_layout Enumerate
Bloques 0 a 9 contienen direcciones directas 
\end_layout

\begin_layout Enumerate
Bloque 10 contiene dirección indirecta simple 
\end_layout

\begin_layout Enumerate
Bloque 11 contiene dirección indirecta doble 
\end_layout

\begin_layout Enumerate
Bloque 12 contiene dirección indirecta triple 
\end_layout

\end_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset


\begin_inset Graphics
	filename img/inode-detail.jpg
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Nodo-i
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cada vez que un archivo cambia, cambia su correspondiente nodo-i.
 Pero si el contenido del nodo-i cambia, no necesariamente cambiará el archivo
 también.
\end_layout

\begin_layout Standard
La copia de un nodo-i a memoria contiene, además de los campos ya mencionados,
 los siguientes: 
\end_layout

\begin_layout Itemize
Estado del nodo-i en memoria (
\begin_inset Quotes eld
\end_inset

bloqueado/desbloqueado
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

proceso esperando por el nodo-i
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

la copia en memoria es distinta a la que está en el disco por un cambio
 en el nodo-i
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

la copia en memoria es distinta a la que está en el disco por un cambio
 en los datos del archivo
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

el archivo es un punto de montaje
\begin_inset Quotes erd
\end_inset

), 
\end_layout

\begin_layout Itemize
Número de dispositivo que contiene al archivo, 
\end_layout

\begin_layout Itemize
Número de nodo-i, 
\end_layout

\begin_layout Itemize
Punteros a otros nodos-i en memoria (el sistema encadena los nodos-i en
 memoria de igual forma que los buffers de bloques), 
\end_layout

\begin_layout Itemize
Contador que indica el número de instancias del archivo que están activas.
\end_layout

\begin_deeper
\begin_layout Standard
Cuando este contador llega a 0, el nodo-i se libera y se lo agrega a la
 lista de nodos-i libres.
\end_layout

\end_deeper
\begin_layout Standard
Ventajas: 
\end_layout

\begin_layout Enumerate
El nodo-i necesita estar en memoria
\series bold
 solo cuando está abierto el archivo
\series default
.
\end_layout

\begin_layout Standard
Desventajas: 
\end_layout

\begin_layout Enumerate
El número del nodo-i es simplemente un índice a un sector del disco que
 contiene al nodo-i en sí.
 Por lo tanto, hay una 
\series bold
cantidad fija de nodos-i posibles
\series default
.
 
\end_layout

\end_deeper
\begin_layout Subsection
Implementación de directorios
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="2cm">
<column alignment="center" valignment="top" width="3cm">
<column alignment="center" valignment="top" width="3cm">
<column alignment="center" valignment="top" width="6cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Implementación de archivos mediante...

\emph default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Asignación contigua
\series default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Asignación de lista enlazada (en disco y en memoria)
\series default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Nodos-i
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Entrada de directorio debe contener...

\emph default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nombre de archivo + Dirección de disco del primer bloque + Cantidad de bloques
 que ocupa el archivo 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nombre de archivo + Dirección de disco del primer bloque 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nombre de archivo + 
\series bold
Número
\series default
 del nodo-i del archivo.
\end_layout

\begin_layout Plain Layout
El directorio raíz suele ser el nodo-i 0.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Para leer un archivo...
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/unix_pathname_resolution.png
	scale 23

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Ejemplos de sistemas de archivos
\end_layout

\begin_layout Subsubsection
Linux: ext2
\end_layout

\begin_layout Standard

\emph on
Estructura del sistema de archivos:
\emph default
 
\end_layout

\begin_layout Itemize
Linux admite varias docenas de sistemas de archivos mediante la capa 
\series bold
\emph on
Virtual File System
\series default
\emph default
 (VFS).
 VFS oculta de los procesos y las aplicaciones de nivel superior las diferencias
 entre muchos tipos de sistemas de archivos que Linux acepta.
 VFS define un conjunto de abstracciones básicas del sistema de archivos
 y las operaciones que se permiten en estas abstracciones.
\end_layout

\begin_deeper
\begin_layout Standard
VFS acepta sistemas de archivos con cuatro estructuras principales:
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="6cm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Superbloque
\emph default
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Contiene información sobre el sistema de archivos.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Dentry
\emph default
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Representa una entrada de directorio.
 Se crea mediante el sistema de archivos al instante.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Nodo-i
\emph default
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cada nodo-i describe un archivo, directorio o dispositivo.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Archivo
\emph default
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Representación en memoria de un archivo abierto.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Nombres de archivos de 255 caracteres.
 
\end_layout

\begin_layout Itemize

\series bold
Archivo
\series default
: consiste en una secuencia de 0 o más bytes.
 No se distingue entre archivos ASCII o binarios, o cualquier otro tipo.
 
\end_layout

\begin_layout Itemize
Es un sistema de archivos jerárquico.
 
\end_layout

\begin_layout Standard

\emph on
Sistema de archivos ext2:
\emph default
 
\end_layout

\begin_layout Itemize
Estructura:
\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/ext2.png
	scale 70

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Sistema de archivos ext2
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\emph on
Superblock
\emph default
: contiene la cantidad de nodos-i, la cantidad de bloques de disco, y el
 principio de la lista de bloques libres.
 
\end_layout

\begin_layout Itemize

\emph on
Descriptor de grupo
\emph default
: contiene la localización de los bitmaps, la cantidad de bloques y nodos-i
 libres, y la cantidad de directorios.
 
\end_layout

\begin_layout Itemize

\emph on
Bitmap de bloques
\emph default
, de 1 KB.
 
\end_layout

\begin_layout Itemize

\emph on
Bitmap de nodos-i
\emph default
, de 1 KB.
 
\end_layout

\begin_layout Itemize

\emph on
Nodos-i
\emph default
, de 128 bytes cada uno.
 
\end_layout

\begin_layout Itemize

\emph on
Bloques de datos
\emph default
.
 
\end_layout

\end_deeper
\begin_layout Itemize
Una entrada de directorio contiene:
\end_layout

\begin_deeper
\begin_layout Itemize
Número de nodo-i, 
\end_layout

\begin_layout Itemize
Tamaño de la entrada, 
\end_layout

\begin_layout Itemize
Tipo de entrada (archivo, directorio, dispositivo), 
\end_layout

\begin_layout Itemize
Longitud del nombre del archivo, 
\end_layout

\begin_layout Itemize
Nombre el archivo.
 
\end_layout

\end_deeper
\begin_layout Itemize
Cada proceso tiene su propia 
\emph on
file descriptor table
\emph default
 (tabla descriptora de procesos).
 El sistema tiene una única 
\emph on
open file descriptor table.

\emph default
 
\end_layout

\begin_layout Standard

\emph on
Seguridad
\emph default
: 
\end_layout

\begin_layout Itemize
Cada usuario tiene un
\series bold
 User ID
\series default
 (UID), un número entero desde 1 a 65.525.
 El usuario con UID 0 es el 
\series bold
root
\series default
 (supervisor).
 
\end_layout

\begin_layout Itemize
Los usuarios se pueden organizar en grupos.
 Cada grupo tiene su propio 
\series bold
Group ID
\series default
 (GID).
 
\end_layout

\begin_layout Itemize
Cada proceso lleva el UID y el GID de su dueño.
 
\end_layout

\begin_layout Itemize
Los permisos de los 
\series bold
archivos
\series default
 se heredan del proceso que los creó.
 Cada archivo tiene 
\series bold
9 bits de seguridad
\series default
: 3 bits 
\series bold
rwx 
\series default
(r=
\emph on
read
\emph default
, w=
\emph on
write
\emph default
, x=
\emph on
execute
\emph default
) para el dueño, 3 bits rwx para el grupo del dueño, y 3 bits rwx para el
 resto.
 
\end_layout

\begin_layout Itemize
Los directorios son archivos, y por lo tanto también tienen 9 bits de seguridad,
 pero el bit 
\series bold
x 
\series default
se refiere al permiso de búsqueda.
 
\end_layout

\begin_layout Subsubsection
Linux: ext3
\end_layout

\begin_layout Standard
Es el mismo que ext2 pero incorpora la funcionalidad de 
\emph on
journaling
\emph default
, por lo que ext3 es más lento que ext2.
\end_layout

\begin_layout Subsubsection
UNIX: BSD (Berkeley Software Distribution)
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/unix file system.png
	scale 50

\end_inset

 
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
UNIX File System
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
Estructura del sistema de archivos:
\emph default
 
\end_layout

\begin_layout Itemize
Los 
\series bold
registros de directorio
\series default
 son de longitud variable.
 Cada uno contiene:
\end_layout

\begin_deeper
\begin_layout Itemize
Nombre del archivo o subdirectorio, 
\end_layout

\begin_layout Itemize
Número de nodo-i del archivo o subdirectorio.
 
\end_layout

\end_deeper
\begin_layout Itemize
El volumen se organiza en 
\series bold
bloques
\series default
 (en general de 4 KB cada uno), pero para minimizar la fragmentación interna,
 el sistema maneja 
\series bold
fragmentos de bloque
\series default
 que deben tener de tamaño submúltiplo del tamaño de bloque (por ejemplo,
 de 1 KB).
 Los fragmentos de bloque se utilizan para asignárselos a bloques finales
 de archivos.
 Entonces, un bloque puede tener fragmentos de distintos archivos, pero
 un archivo no puede tener sus fragmentos en distintos bloques.
 
\end_layout

\begin_layout Itemize
Un 
\series bold
volumen
\series default
 se compone de varias secciones:
\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
Boot block
\series default
: contiene el módulo de arranque del sistema operativo de esa partición.
 
\end_layout

\begin_layout Enumerate

\series bold
Superblock
\series default
: contiene todos los parámetros clave acerca del sistema de archivos.
 Se encuentra replicado en distintas partes del sistema, para asegurar su
 integridad.
 Contiene:
\end_layout

\begin_deeper
\begin_layout Enumerate
Tamaño del sistema de archivos, 
\end_layout

\begin_layout Enumerate
Tamaño de los bloques, 
\end_layout

\begin_layout Enumerate
Bitmap para para control de fragmentos de bloque libres 
\end_layout

\begin_layout Enumerate
Cantidad de nodos-i libres, 
\end_layout

\begin_layout Enumerate
Lista de nodos-i libres, 
\end_layout

\begin_layout Enumerate
Puntero al primer nodo-i libre, 
\end_layout

\begin_layout Enumerate
Campos para bloquear los mapas de bloques y la lista de nodos-i libres,
 
\end_layout

\begin_layout Enumerate
Campo que indica que el superblock ha sido modificado.
 
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Inode list
\series default
: lista de nodos-i del sistema de archivo.
 El tamaño de esta lista debe ser especificado por el administrador al configura
r el sistema.
 
\end_layout

\begin_layout Enumerate

\series bold
Data blocks
\series default
.
 Un block de datos puede pertenecer a uno y solo un archivo.
\end_layout

\begin_deeper
\begin_layout Standard
Los datos se dividen en áreas conformadas por cilindros adyacentes.
 Cada área tiene su superblock propio, para aumentar la seguridad.
 Cada grupo de cilindros tiene su propia lista de nodos-i.
 La política de asignación de espacio procura que los archivos queden localizado
s en una misma área.
 El sistema trata de ubicar los nodos-i de un directorio en una misma área.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Cada proceso tiene su propia 
\emph on
user file descriptor table
\emph default
.
 El sistema tiene una única 
\emph on
open file table.
 
\emph default
Cuando un proceso abre o crea un archivo, el kernel devuelve un 
\emph on
file descriptor
\emph default
 que es un índice a la 
\emph on
user file descriptor table
\emph default
 de ese proceso.
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
User file descriptor table
\emph default
: para cada archivo abierto por el proceso, contiene un puntero a la 
\emph on
file table
\emph default
 correspondiente a ese archivo.
 
\end_layout

\begin_layout Itemize

\emph on
Open file table
\emph default
: estructura global del kernel, que para cada archivo abierto, contiene
 el desplazamiento en bytes en el archivo donde comenzará la próxima lectura
 o escritura.
 
\end_layout

\begin_layout Itemize

\emph on
Inode table
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/file descriptor table.png

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Relación entre las tablas
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cuando se llama a una 
\emph on
system call 
\emph default
que involucra un 
\emph on
file descriptor
\emph default
, el
\emph on
 file descriptor
\emph default
 se utiliza como un índice a la 
\emph on
file descriptor table
\emph default
 para localizar el puntero a la 
\emph on
open file descriptor table
\emph default
 y a su vez al nodo-i correspondiente al archivo.
\end_layout

\end_deeper
\begin_layout Subsubsection
Microsoft: NTFS (New Technology File System)
\end_layout

\begin_layout Standard

\emph on
Estructura del sistema de archivos:
\emph default
 
\end_layout

\begin_layout Itemize
Es un sistema de archivos jerárquico que se desarrolló específicamente para
 la versión Windows NT.
 
\end_layout

\begin_layout Itemize
Utiliza direcciones de disco de 64 bits, y por lo tanto acepta particiones
 de hasta 16 exabytes.
 
\end_layout

\begin_layout Itemize

\series bold
Archivo
\series default
: consiste en varios atributos, y cada uno se representa mediante un flujo
 de bytes.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Atributos residentes, se almacenan en la MTF
\end_layout

\begin_layout Itemize
Atributos no residentes
\end_layout

\end_deeper
\begin_layout Itemize
Hay soporte para 
\emph on
hard links
\emph default
, pero sólo se pueden aplicar a archivos del mismo volumen dado que al registro
 del archivo en la MFT se le agrega otro registro.
 Además, si se le cambia el tamaño o los atributos a un archivo, las entradas
 de los demás links pueden no ser actualizadas hasta que se abran.
 
\end_layout

\begin_layout Itemize
Hay soporte para 
\emph on
soft links
\emph default
.
 
\end_layout

\begin_layout Itemize
Cada volumen se organiza como una secuencia lineal de 
\series bold
clústeres
\series default
 (conjuntos de 
\series bold
sectores
\series default
) de tamaño fijo (por lo general, 4 KB).
 Los 
\series bold
fragmentos
\series default
 son conjuntos contiguos de clusters, y están especificados por:
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
Virtual Cluster Number
\emph default
 (VCN): número de cluster relativo respecto del archivo.
 
\end_layout

\begin_layout Itemize

\emph on
Logical Cluster Number
\emph default
 (LCN): número real de cluster lógico respecto del disco.
 
\end_layout

\begin_layout Itemize
Cantidad de clusteres contiguos a partir de LCN.
 
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Master File Table (MFT)
\series default
: principal estructura de datos de cada volumen.
\end_layout

\begin_deeper
\begin_layout Itemize
Es un 
\series bold
archivo
\series default
 extensible hasta 
\begin_inset Formula $2^{48}$
\end_inset

 registros.
 Es una secuencia lineal de 
\series bold
registros
\series default
 de 1 KB cada uno.
 Cada registro consiste en un 
\series bold
encabezado de registro
\series default
 (número mágico para comprobar la validez del archivo, puntero al primer
 atributo, puntero al primer byte de espacio libre en el registro, número
 de registro base del archivo) más una secuencia de 
\series bold
pares
\series default
 
\begin_inset Formula $<$
\end_inset

encabezado de atributo (definición del atributo, longitud del valor), valor
 del atributo
\begin_inset Formula $>$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset


\begin_inset Graphics
	filename img/mft_record.png
	scale 65

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Ejemplo de registro de la MFT.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Cada registro describe a un archivo o un directorio:
\end_layout

\begin_deeper
\begin_layout Itemize
Atributos del archivo.
\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/mft-atributos de un registro.png
	scale 60

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Atributos de un registro de la MFT
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Lista de direcciones de disco donde se encuentran sus bloques.
 
\end_layout

\end_deeper
\begin_layout Itemize
Los directorios chicos son registros con varias entradas de directorios,
 cada una de las cuales describe a un archivo o directorio.
 Los directorios grandes utilizan árboles B+ para listar archivos, facilitando
 la búsqueda alfabética y la inserción.
 
\end_layout

\begin_layout Itemize
Si el archivo ocupa muchos bloques en disco, el primer registro de la MFT
 (
\series bold
registro base
\series default
) de ese archivo apunta a los otros registros de la MFT del mismo archivo.
 
\end_layout

\begin_layout Itemize
Como es un archivo, se lo puede colocar en cualquier parte del disco.
 
\end_layout

\begin_layout Itemize
Un 
\series bold
bitmap
\series default
 lleva el registro de las entradas libres en la MFT.
 
\end_layout

\begin_layout Itemize
Los primeros 16 registros de la MFT se reservan para describir los archivos
 de metadatos de NTFS.
\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset


\begin_inset Graphics
	filename img/mft.png
	scale 70

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
MFT de NTFS
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Standard

\emph on
Seguridad:
\emph default
 
\end_layout

\begin_layout Itemize
NTFS utiliza un diario de cambios (
\emph on
journal
\emph default
): es el archivo de metadatos 
\family typewriter
$LogFile
\family default
.
 Este archivo registra, cada 5 segundos, los cambios que se producen en
 todas las estructuras de disco, y si se completan con éxito, se elimina
 el registro correspondiente.
 Este archivo tiene dos tipos de registros:
\end_layout

\begin_deeper
\begin_layout Itemize
UNDO: para deshacer acciones que no se pudieron completar.
 
\end_layout

\begin_layout Itemize
REDO: para rehacer acciones que no se pudieron completar.
 
\end_layout

\end_deeper
\begin_layout Itemize
Cada usuario y grupo se identifica mediante un 
\series bold
SID
\series default
 (
\emph on
Security ID
\emph default
).
 Cada SID es único en el mundo.
 Cuando un usuario comienza un proceso, el proceso y sus hilos corren bajo
 el SID del usuario.
 
\end_layout

\begin_layout Itemize
Cada proceso tiene un 
\series bold
token de acceso
\series default
, que indica quién es el propietario del proceso y qué valores y poderes
 están asociados con él.
 
\end_layout

\begin_layout Itemize
Cada objeto tiene asociado en la MFT un 
\series bold
descriptor de seguridad
\series default
, que indica quién puede realizar operaciones sobre él.
\end_layout

\begin_layout Subsection
Otros sistemas de archivo
\end_layout

\begin_layout Description
Transactional
\begin_inset space ~
\end_inset

NTFS a component of Windows Vista and later operating systems.
 It brings the concept of atomic transactions
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
An example of atomicity is ordering an airline ticket where two actions
 are required: payment, and a seat reservation.
 The potential passenger must either: both pay for and reserve a seat; OR
 neither pay for nor reserve a seat.
 The booking system does not consider it acceptable for a customer to pay
 for a ticket without securing the seat, nor to reserve the seat without
 payment succeeding.
\end_layout

\end_inset

 to the NTFS file system, allowing Windows application developers to write
 file output routines that are guaranteed either to succeed completely or
 to fail completely.
 
\end_layout

\begin_deeper
\begin_layout Standard
Transactional NTFS allows for files and directories to be created, modified,
 renamed, and deleted atomically.
 Using transactions ensures correctness of operation; in a series of file
 operations (done as a transaction), the operation will be committed if
 all the operations succeed.
 In case of any failure, the entire operation will rollback and fail.
 Transactional NTFS is implemented on top of the Kernel Transaction Manager
 (KTM), which is a Windows kernel component first introduced in Windows
 Vista that provides transactioning of objects in the kernel.
\end_layout

\end_deeper
\begin_layout Standard
A 
\series bold
log-structured filesystem
\series default
 is a file system in which data and metadata are written sequentially to
 a circular buffer, called a log.
\end_layout

\begin_layout Standard
This has several important side effects: 
\end_layout

\begin_layout Enumerate
Write throughput on optical and magnetic disks is improved because they
 can be batched into large sequential runs and costly seeks are kept to
 a minimum.
 
\end_layout

\begin_layout Enumerate
Writes create multiple, chronologically-advancing versions of both file
 data and meta-data.
 Some implementations make these old file versions nameable and accessible,
 a feature sometimes called time-travel or snapshotting.
 This is very similar to a versioning file system.
 
\end_layout

\begin_layout Enumerate
Recovery from crashes is simpler.
 Upon its next mount, the file system does not need to walk all its data
 structures to fix any inconsistencies, but can reconstruct its state from
 the last consistent point in the log.
\end_layout

\begin_layout Standard
A 
\series bold
versioning file system
\series default
 is any computer file system which allows a computer file to exist in several
 versions at the same time.
 Thus it is a form of revision control.
 Most common versioning file systems keep a number of old copies of the
 file.
 Some limit the number of changes per minute or per hour to avoid storing
 large numbers of trivial changes.
 Others instead take periodic snapshots whose contents can be accessed with
 similar semantics to normal file access.
\end_layout

\begin_layout Standard
A
\series bold
 journaling file system
\series default
 is a file system that keeps track of the changes that will be made in a
 journal (usually a circular log in a dedicated area of the file system)
 before committing them to the main file system.
 In the event of a system crash or power failure, such file systems are
 quicker to bring back online and less likely to become corrupted.
 After a crash, recovery simply involves reading the journal from the file
 system and replaying changes from this journal until the file system is
 consistent again.
 The changes are thus said to be atomic (not divisible) in that they either:
 succeed (succeeded originally or are replayed completely during recovery),
 or are not replayed at all (are skipped because they had not yet been completel
y written to the journal before the crash occurred).
\end_layout

\begin_layout Standard
A 
\series bold
virtual file system (VFS)
\series default
 is an abstraction layer on top of a more concrete file system.
 The purpose of a VFS is to allow client applications to access different
 types of concrete file systems in a uniform way.
 A VFS can, for example, be used to access local and network storage devices
 transparently without the client application noticing the difference.
 It can be used to bridge the differences in Windows, Mac OS and Unix filesystem
s, so that applications can access files on local file systems of those
 types without having to know what type of file system they are accessing.
 A VFS specifies an interface (or a "contract") between the kernel and a
 concrete file system.
 Therefore, it is easy to add support for new file system types to the kernel
 simply by fulfilling the contract.
 The terms of the contract might change incompatibly from release to release,
 which would require that concrete file system support be recompiled.
\end_layout

\begin_layout Subsection
Archivos mapeados a memoria
\end_layout

\begin_layout Standard

\emph on
Son un segmento de memoria virtual al que se le asignó una correlación directa
 byte-a-byte con alguna porción de un archivo o recurso similar a un archivo.
 Este recurso es, típicamente, un archivo que esta físicamente en el disco,
 pero también puede ser un dispositivo, objeto de memoria compartida u otro
 recurso que el sistema operativo puede referenciar mediante un descriptor.
 Una vez en memoria los archivos mapeados se ven como parte de la memoria.
\end_layout

\begin_layout Standard

\emph on
The memory mapping process is handled by the virtual memory manager, which
 is the same subsystem responsible for dealing with the page file.
 Memory mapped files are loaded into memory one entire page at a time.
 
\end_layout

\begin_layout Standard
Ventajas:
\end_layout

\begin_layout Itemize
Aumenta la performance de I/O, especialmente con archivos grandes.
 
\emph on
Accessing memory mapped files is faster than using direct read and write
 operations for two reasons.
 Firstly, a system call is orders of magnitude slower than a simple change
 to a program's local memory.
 Secondly, in most operating systems the memory region mapped actually is
 the kernel's page cache (file cache), meaning that no copies need to be
 created in user space.
\end_layout

\begin_layout Itemize

\emph on
Applications can access and update data in the file directly and in-place,
 as opposed to seeking from the start of the file or rewriting the entire
 edited contents to a temporary location.
 Since the memory-mapped file is handled internally in pages, linear file
 access requires disk access only when a new page boundary is crossed, and
 can write larger sections of the file to disk in a single operation.
\end_layout

\begin_layout Standard
Desventajas:
\end_layout

\begin_layout Itemize

\emph on
The memory mapped approach has its cost in minor page faults - when a block
 of data is loaded in page cache, but is not yet mapped into the process's
 virtual memory space.
 
\end_layout

\begin_layout Itemize

\emph on
A file larger than the addressable space can have only portions mapped at
 a time, complicating reading it.
\end_layout

\begin_layout Standard
Aplicaciones:
\end_layout

\begin_layout Itemize

\series bold
Loading
\series default
: 
\emph on
When a process is started, the operating system uses a memory mapped file
 to bring the executable file, along with any loadable modules, into memory
 for execution.
 This permits the OS to selectively load only those portions of a process
 image that actually need to execute.
\end_layout

\begin_layout Itemize
Permitir a varios procesos compartir la misma información en memoria.
\end_layout

\begin_layout Itemize
Acceder a archivos en disco rápidamente sin necesidad de usar 
\emph on
buffers
\emph default
.
\end_layout

\begin_layout Standard
En C se hace utilizando la librería 
\family typewriter
sys/mman.h
\family default
, mediante las funciones 
\family typewriter
mmap
\family default
 y 
\family typewriter
munmap
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int fd = open("archivo.txt", O_RDONLY, S_IRUSR);
\end_layout

\begin_layout Plain Layout

int len = 1024; //100 registros de ints
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void* addr = mmap(NULL, len, PROT_READ, MAP_SHARED, fd, 0);
\end_layout

\begin_layout Plain Layout

close(fd);	//no hace falta mas
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int ar* = (int*) addr; // establezco direccionamiento
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for (int i=0; i < 100; i++)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	// imprimo el contenido de cada registro
\end_layout

\begin_layout Plain Layout

	cout<<"a["<<i<<"]="<<ar[i]<<", ";
\end_layout

\begin_layout Plain Layout

	if (i%10 == 9)
\end_layout

\begin_layout Plain Layout

		cout<<endl;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

munmap(adrr,len); //lo sacamos de memoria.
 si no lo hago, exit() lo hace
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Lectura de archivos mapeados a memoria
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int fd = open("archivo.txt", O_RDWR|O_CREAT, S_IRUSR | S_IWUSR);
\end_layout

\begin_layout Plain Layout

int len = 1024; //100 registros de ints
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void* addr = mmap(NULL, len, PROT_WRITE, MAP_SHARED, fd, 0);
\end_layout

\begin_layout Plain Layout

close(fd);	//no hace falta mas
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int ar* = (int*) addr; // establezco direccionamiento
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for (int i=0; i < 100; i++)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	ar[i] = 1000 + i; // en cada byte del archivo escribimos un valor
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

munmap(adrr,len); //lo sacamos de memoria.
 si no lo hago, exit() lo hace
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Escribir en archivos mapeados a memoria
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\emph on
Clustered filesystems
\end_layout

\begin_layout Description

\emph on
Clustered
\begin_inset space ~
\end_inset

file
\begin_inset space ~
\end_inset

system
\emph default
 sistema de archivo que es compartido por estar montado simultáneamente
 en múltiples servidores.
 Pueden proveer de servicios como 
\emph on
location-independent addressing 
\emph default
y redundancia, que mejoran la confiabilidad y reducen la complejidad de
 otras partes del cluster.
 
\end_layout

\begin_deeper
\begin_layout Standard
Proveen un mecanismo de control de concurrencia y de serialización.
\end_layout

\end_deeper
\begin_layout Description

\emph on
RAID
\begin_inset space ~
\end_inset

(Redundant
\begin_inset space ~
\end_inset

Array
\begin_inset space ~
\end_inset

of
\begin_inset space ~
\end_inset

Inexpensive
\begin_inset space ~
\end_inset

Disks)
\emph default
 tecnología de almacenamiento que combina múltiples discos en una sola unidad
 lógica.
 Los datos son distribuidos a través de los discos en varias formas (
\begin_inset Quotes eld
\end_inset

niveles RAID
\begin_inset Quotes erd
\end_inset

) dependiendo de la redundancia y 
\emph on
performance
\emph default
 requeridas, pero son vistos como un solo disco por el sistema operativo.
\end_layout

\begin_deeper
\begin_layout Standard
Provee funciones de:
\end_layout

\begin_layout Itemize

\emph on
Disk
\begin_inset space ~
\end_inset

mirroring
\emph default
: replicación de volúmenes de discos en discos duros separados para asegurar
 la disponibilidad continua.
\end_layout

\begin_layout Itemize

\emph on
Data
\begin_inset space ~
\end_inset

striping
\emph default
: técnica de segmentar datos secuencialmente lógicos para almacenarlos en
 dispositivos distintos y permitir el acceso concurrente.
\end_layout

\begin_layout Itemize
Corrección de errores
\end_layout

\begin_layout Standard
Se realiza de dos formas:
\end_layout

\begin_layout Itemize

\series bold
\emph on
Software RAID
\series default
 
\series bold
/ Fake RAID
\series default
:
\emph default
 existe una capa adicional entre el 
\emph on
file system
\emph default
 y el 
\emph on
device driver
\emph default
.
 El procesador debe estar ocupado haciendo las operaciones del RAID.
 El usuario puede ver que existen varios discos, y puede unirlos en un RAID.
\end_layout

\begin_layout Itemize

\series bold
\emph on
Hardware RAID
\series default
\emph default
: existe un dispositivo que maneja los discos físicos y los presenta a la
 computadora como una unidad lógica.
 El sistema operativo (y por lo tanto el usuario) solo ve un disco, que
 es este controlador haciéndose pasar por un disco.
 Provee de una interfaz front-end y back-end:
\end_layout

\begin_deeper
\begin_layout Itemize
Front-end hacia el 
\emph on
host adapter
\emph default
 de la computadora
\end_layout

\begin_layout Itemize
Back-end hacia los discos
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/raid_levels.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Niveles RAID
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Description

\emph on
Levels
\begin_inset space ~
\end_inset

of
\begin_inset space ~
\end_inset

nested
\begin_inset space ~
\end_inset

RAID
\begin_inset space ~
\end_inset

/
\begin_inset space ~
\end_inset

hybrid
\begin_inset space ~
\end_inset

RAID
\emph default
 combina dos o más niveles de RAID para ganar performance, redundancia,
 o ambos.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename img/nested_RAID.PNG
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\emph on
Nested RAID
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
También existen arquitecturas no RAID:
\end_layout

\begin_layout Itemize

\series bold
JBOD
\series default
 
\emph on
(Just a Bunch of Disks)
\emph default
: 
\emph on
an array of drives, each of which can be accessed directly as an independent
 drive.
\end_layout

\begin_layout Itemize

\series bold
MAID
\series default
\emph on
 
\emph default
(
\emph on
Massive Array of Idle Drives
\emph default
)
\emph on
: hundreds to thousands of hard drives for nearline storage.
 MAID is designed for 
\begin_inset Quotes eld
\end_inset

Write Once, Read Occasionally
\begin_inset Quotes erd
\end_inset

applications.
\end_layout

\begin_layout Subsection
Tipos de almacenamiento
\end_layout

\begin_layout Standard

\emph on
Storage Area Networks (SANs) and Network Attached Storage (NAS) complement
 each other very well to provide access to different types of data.
 SANs are optimized for high-volume block-oriented data transfers while
 NAS is designed to provide data access at the file level.
 
\end_layout

\begin_layout Standard

\series bold
\emph on
A NAS is a single storage device that operate on data files, while a SAN
 is a local network of multiple devices that operate on disk blocks.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\emph on
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\emph on
\begin_inset Graphics
	filename img/nas.PNG
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout

\emph on
\begin_inset Caption

\begin_layout Plain Layout
NAS
\end_layout

\end_inset


\end_layout

\end_inset


\emph default

\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/san.PNG
	scale 66

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
SAN
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
NAS vs SAN
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Description

\emph on
Network
\begin_inset space ~
\end_inset

Attached
\begin_inset space ~
\end_inset

Storage
\begin_inset space ~
\end_inset

(NAS) 
\emph default
conecta un 
\emph on
File System
\emph default
 remoto a una red, proveyendo el acceso a clientes heterogéneos.
 Provee almacenamiento e implementa el software de 
\emph on
File System
\emph default
.
\end_layout

\begin_layout Description

\emph on
Storage
\begin_inset space ~
\end_inset

Area
\begin_inset space ~
\end_inset

Network
\begin_inset space ~
\end_inset

(SAN) 
\emph default
conecta dispositivos remotos que el sistema operativo ve como locales, proporcio
na almacenamiento en bloques, y deja el 
\emph on
File System
\emph default
 a cargo del cliente.
\end_layout

\begin_layout Standard
Cualquiera de las dos arquitecturas soporta RAID.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="left" valignment="top" width="5cm">
<column alignment="left" valignment="top" width="5cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
SAN
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
NAS
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protocolos
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fibre Channel
\end_layout

\begin_layout Plain Layout
Fibre Channel-to-SCSI
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TCP/IP
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Aplicaciones
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
Procesamiento de bases de datos en transacciones
\end_layout

\begin_layout Itemize
Resguardo de información en forma centralizada
\end_layout

\begin_layout Itemize
Recupero ante desastres
\end_layout

\begin_layout Itemize
Consolidación de almacenamiento
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
Compartición de archivos
\end_layout

\begin_layout Itemize
Transferencia de datos sobre grandes distancias
\end_layout

\begin_layout Itemize
Acceso de solo lectura a bases de datos
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ventajas
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
Gran disponibilidad
\end_layout

\begin_layout Itemize
Confiabilidad de la transferencia de datos
\end_layout

\begin_layout Itemize
Tráfico reducido
\end_layout

\begin_layout Itemize
Configurable
\end_layout

\begin_layout Itemize
Administración centralizada
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
No hay limitación de distancias
\end_layout

\begin_layout Itemize
Es fácil agregar capacidad de almacenamiento
\end_layout

\begin_layout Itemize
Fácil de instalar y mantener
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Quote

\emph on
The administrator of a home or small business network can connect one NAS
 device to their LAN.
 The NAS maintains its own IP address comparable to computer and other TCP/IP
 devices.
 Using a software program that normally is provided together with the NAS
 hardware, a network administrator can set up automatic or manual backups
 and file copies between the NAS and all other connected devices.
 The NAS holds many gigabytes of data, up to a few terabytes.
 Administrators add more storage capacity to their network by installing
 additional NAS devices, although each NAS operates independently.
 Administrators of larger enterprise networks may require many terabytes
 of centralized file storage or very high-speed file transfer operations.
 Where installing an army of many NAS devices is not a practical option,
 administrators can instead install a single SAN containing a high-performance
 disk array to provide the needed scalability and performance.
 Administrators require specialized knowledge and training to configure
 and maintain SANs.
\end_layout

\begin_layout Part
Parte Práctica
\end_layout

\begin_layout Section
BASH
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="3cm">
<column alignment="left" valignment="top" width="4cm">
<column alignment="left" valignment="top" width="8cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Command
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Optional parameters
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
echo x
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Print x
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-n
\family default
 Do not output the trailing newline.
\end_layout

\begin_layout Plain Layout

\family typewriter
-E
\family default
 Disable the interpretation of the following backslash-escaped characters
 
\end_layout

\begin_layout Plain Layout

\family typewriter
-e
\family default
 Enable interpretation of the following backslash-escaped characters in
 each STRING:
\end_layout

\begin_layout Plain Layout

\backslash
a alert (bell) 
\backslash
b backspace 
\backslash
c suppress trailing newline 
\backslash
e escape 
\backslash
f form feed 
\backslash
n new line 
\backslash
r carriage return 
\backslash
t horizontal tab 
\backslash
v vertical tab 
\backslash

\backslash
 backslash
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ls
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List files in directory
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-l
\family default
: with details
\end_layout

\begin_layout Plain Layout

\family typewriter
-1
\family default
: one line per file
\end_layout

\begin_layout Plain Layout

\family typewriter
-a
\family default
: include hidden files, 
\begin_inset Quotes eld
\end_inset

.
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

..
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
chown owner file
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Change file's ownership
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
chgrp group file
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Change file's group
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
chmod mode file
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Change's file permissions
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
cp source destination
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Copy source to destination
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
more file
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Show file on screen, paged.
 Move forward with spacebar
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-d
\family default
: show message "[Press space to continue, 'q' to quit.]"
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
export variable
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set export attribute for shell variables
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
cat file
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Concatenate file(s), or standard input, to standard output.
 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
cut file
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Print selected parts of lines from each file to standard output.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-b=LIST
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
select only these bytes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-c=LIST
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
select only these characters
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-f=LIST
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
select only these fields
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
Use one, and only one of -b, -c or -f.
 Each LIST is made up of one range, or many ranges separated by commas.
 Selected input is written in the same order that it is read, and is written
 exactly once.
 Each range is one of: N N'th byte, character or field, counted from 1 N-
 from N'th byte, character or field, to end of line N-M from N'th to M'th
 (included) byte, character or field -M from first to M'th (included) byte,
 character or field
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
read name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Read a line from standard input and assign it to 
\emph on
name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Itemize
-d delim: use 
\emph on
delim
\emph default
 to terminate the input line
\end_layout

\begin_layout Itemize
-r: backslash doesn't act as an escape character
\end_layout

\begin_layout Itemize
-s: characters written are not echoed
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\lang english
Commands
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="6cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Environment Variable
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SHELL
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name of shell
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
PWD
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Print the full filename of the current working directory.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
PS1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prompt 1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
PATH
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Path where to find executables
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
RANDOM
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A random integer between 0 and 32767 is generated.
 Assigning a value to this variable seeds the random number generator.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
USER
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Get current user
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\lang english
Environment variables
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#!/bin/bash
\end_layout

\begin_layout Plain Layout

# An entire array can be assigned by enclosing the array items in parenthesis:
\end_layout

\begin_layout Plain Layout

NAMESERVERS=("ns1.nixcraft.net." "ns2.nixcraft.net." "ns3.nixcraft.net.")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Individual items can be assigned with the familiar array syntax
\end_layout

\begin_layout Plain Layout

NAMESERVERS[4]=Hello   
\end_layout

\begin_layout Plain Layout

NAMESERVERS[5]=World
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Get length of an array 
\end_layout

\begin_layout Plain Layout

tLen=${#NAMESERVERS[@]}  # or tLen=${#NAMESERVERS[*]}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Use for loop read all nameservers 
\end_layout

\begin_layout Plain Layout

for (( i=0; i<${tLen}; i++ )); 
\end_layout

\begin_layout Plain Layout

do
\end_layout

\begin_layout Plain Layout

	# It gets a bit ugly when you want to refer to an array item
\end_layout

\begin_layout Plain Layout

	echo ${NAMESERVERS[$i]} 
\end_layout

\begin_layout Plain Layout

done
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

${NAMESERVERS[*]}		 # All of the items in the array 
\end_layout

\begin_layout Plain Layout

${!NAMESERVERS[*]}		# All of the indexes in the array
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\lang english
Arrays
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Inside script parameters
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
$0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Script name
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
$i
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Positional parameter 
\begin_inset Formula $i$
\end_inset

 (
\begin_inset Formula $i=1..9$
\end_inset

)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
$@
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameter list (except 
\family typewriter
$0
\family default
)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
$#
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Length of parameter list (except 
\family typewriter
$0
\family default
)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
File Test Operators
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-f
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
File exists?
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Directory exists?
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

while read -r line	# -r prevents backslash interpretation, use it always
\end_layout

\begin_layout Plain Layout

do
\end_layout

\begin_layout Plain Layout

	# ...
 process line ...
\end_layout

\begin_layout Plain Layout

done < $filename
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\lang english
Read from file
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# Numeric ranges for syntax is as follows:
\end_layout

\begin_layout Plain Layout

for i in 1 2 3 4 5 
\end_layout

\begin_layout Plain Layout

do    
\end_layout

\begin_layout Plain Layout

	echo "Welcome $i times" 
\end_layout

\begin_layout Plain Layout

done
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for i in {1..5} 
\end_layout

\begin_layout Plain Layout

do
\end_layout

\begin_layout Plain Layout

   echo "Welcome $i times"
\end_layout

\begin_layout Plain Layout

done
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for OUTPUT in $(Linux-Or-Unix-Command-Here) 
\end_layout

\begin_layout Plain Layout

do 	
\end_layout

\begin_layout Plain Layout

	# command1 on $OUTPUT 	
\end_layout

\begin_layout Plain Layout

done
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for (( i=1; i<=5; i++ ))
\end_layout

\begin_layout Plain Layout

do
\end_layout

\begin_layout Plain Layout

	echo "Welcome $i times"
\end_layout

\begin_layout Plain Layout

done
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\lang english
For loop syntax
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

array=(Hello World) #contains two elements
\end_layout

\begin_layout Plain Layout

echo ${array[0]} #prints "Hello", the braces are required to avoid conflicts
 with pathname expansion
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

${array[*]} #all the items
\end_layout

\begin_layout Plain Layout

${#array[*]] #number of items
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\lang english
Arrays en BASH
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Quotation

\family typewriter
regex
\family default
 is a language for describing patterns in strings.
\end_layout

\begin_layout Quotation

\family typewriter
grep
\family default
 filters its input against a pattern.
\end_layout

\begin_layout Quotation

\family typewriter
sed
\family default
 applies transformation rules to each line.
\end_layout

\begin_layout Standard
In code, regular expressions describe matchable patterns over text.
\end_layout

\begin_layout Standard
They are often used to describe locations in text (e.g.
 all lines that match this pattern) and to transform text (e.g.
 transform text matching a pattern into something different text).
\end_layout

\begin_layout Standard
There is no standard for regular expressions in code, but most languages
 employ a dialect from a common ancestor.
\end_layout

\begin_layout Section

\family typewriter
GREP
\end_layout

\begin_layout Standard
The 
\family typewriter
grep
\family default
 command provides a variety of ways to find strings of text in a file or
 stream of output.
 
\end_layout

\begin_layout Standard
There are two ways to provide input to 
\family typewriter
grep
\family default
, each with its own particular uses.
 
\end_layout

\begin_layout Enumerate

\family typewriter
grep
\family default
 can be used to search a given file or files on a system.
\end_layout

\begin_layout Enumerate

\family typewriter
grep
\family default
 also can be used to send output from another command that 
\family typewriter
grep
\family default
 will then search for the desired content.
\end_layout

\begin_layout Standard
Although it is usually possible to integrate 
\family typewriter
grep
\family default
 into manipulating text or doing “search and replace” operations, it is
 not the most efficient way to get the job done.
 Instead, the 
\family typewriter
sed
\family default
 and 
\family typewriter
awk
\family default
 programs are more useful for these kinds of functions.
 
\end_layout

\begin_layout Standard
There are two basic ways to search with 
\family typewriter
grep
\family default
:
\end_layout

\begin_layout Enumerate
searching for fixed strings and 
\end_layout

\begin_layout Enumerate
searching for patterns of text.
 To search for text with variable content, use regular expressions.
\end_layout

\begin_layout Standard
Regular expressions are included in the 
\family typewriter
grep
\family default
 command in the following format: 
\end_layout

\begin_layout Quote

\family typewriter
grep [options] [regexp] [filename]
\end_layout

\begin_layout Standard
Regular expressions are comprised of two types of characters: 
\end_layout

\begin_layout Enumerate
normal text characters, called 
\emph on
literals
\emph default
, and 
\end_layout

\begin_layout Enumerate
special characters, such as the asterisk (*), called 
\emph on
metacharacters
\emph default
.
 An 
\emph on
escape sequence
\emph default
 allows you to use metacharacters as literals or to identify special characters
 or conditions (such as word boun- daries or “tab characters”).
 
\end_layout

\begin_layout Standard
The desired string that someone hopes to find is a 
\emph on
target string
\emph default
.
\end_layout

\begin_layout Standard
A 
\emph on
regular expression
\emph default
 is the particular search pattern that is entered to find a particular target
 string.
\end_layout

\begin_layout Standard
It is customary to place the regular expression inside single quotation
 marks.
 There are a few reasons for this.
 
\end_layout

\begin_layout Enumerate
The first is that normally Unix shells interpret the space as an end of
 argument and the start of a new one.
 What if the string you wish to search for has a “space” character? The
 quotes tell grep (or another Unix command) where the argument starts and
 stops when spaces or other special characters are involved.
 
\end_layout

\begin_layout Enumerate
The other reason is that various types of quotes can signify different things
 with shell commands such as 
\family typewriter
grep
\family default
.
\end_layout

\begin_deeper
\begin_layout Standard
For instance, using the 
\series bold
single quote
\series default
 underneath the tilde key (also called the backtick) tells the shell to
 execute everything inside those quotes as a command and then use that as
 the string.
 For instance: 
\end_layout

\begin_layout Quote

\family typewriter
grep `whoami` filename 
\end_layout

\begin_layout Standard
would run the 
\family typewriter
whoami
\family default
 command (which returns the username that is running the shell on Unix systems)
 and then use that string to search.
 
\end_layout

\begin_layout Standard

\series bold
Double quotes
\series default
, however, work the same as the single quotes, but with one important difference.
 With double quotes, it becomes possible to use environment variables as
 part of a search pattern: 
\end_layout

\begin_layout Quote

\family typewriter
grep "$HOME" filename
\end_layout

\end_deeper
\begin_layout Subsection
Metacharacters
\end_layout

\begin_layout Standard
Since metacharacters help define the manipulation, it is important to be
 familiar with them.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="23" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="6cm">
<column alignment="center" valignment="top" width="4cm">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\color red
Metacharacter
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\color red
Name
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\color red
Matches
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\color red
Example
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Items to match a single character
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any one character
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
'r.d' 
\family default
would match “red”, “rod”, “red”, “rzd”, and so on 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
[...]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Character class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any character listed in brackets.
 There are two basic ways to use character classes: to specify a range and
 to specify a list of characters.
 A combination of ranges can also be used.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
'[a-f]' 
\end_layout

\begin_layout Plain Layout

\family typewriter
'[aeiou]' 
\end_layout

\begin_layout Plain Layout

\family typewriter
'[a-fA-F0-5]'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
[^...]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Negated character class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any character NOT listed in brackets
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter

\backslash
char
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Escape character
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The character after the slash literally; used when you want to search for
 a “special” character
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'.' would match any single character and would return every piece of text
 in a file.
 '
\backslash
.' would only match the actual “period” character.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Items that match a position
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
^
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Caret
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start of line
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'^red' would match all lines that begin with “red” 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
$
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
End of line.
 It will match every line in a stream except the final line, which is terminated
 by an “end of file” character instead of an “end of line” character.
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'-$' would find all lines whose last character is a dash 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter

\backslash
<
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start of a word.
 It detects the beginning of a word by looking for a space or another “separatio
n” that indicates the beginning of a new word (a period, comma, etc.).
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'
\backslash
<un' would match words starting with the prefix “un”, such as “unimaginable,”
 “undetected,” or “under- valued.” It would not match words such as “funding,”
 “blunder,” or “sun.” 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter

\backslash
>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
End of a word.
 After the characters, it looks for a “sepa- ration” character that indicates
 the end of a word (a space, tab, period, comma, etc.).
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'ing
\backslash
>' would match words that end in “ing” (e.g., “spring”), not words that simply
 contain “ing” (e.g., “kingdom”).
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Quantifiers
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any number (including 0); sometimes used as general wildcard 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'install.*file' should output all the lines that contain “install” (with
 any amount of text in between) and then “file”.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter

\backslash
?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The preceding character (or string if placed after a subpattern) is an “optional
” matching pattern.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'colors
\backslash
?' would match both “color” and “colors”.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter

\backslash
+
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1 or more of the preceding expression 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'150
\backslash
+' would match 150 with any number of additional zeroes (e.g., 1500, 15000,
 1500000, etc.).
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter

\backslash
{N
\backslash
}
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Match exactly N times.
 When placed after a character, indicate a specific number of repetitions
 to search for.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'150{3}
\backslash
b' would match 15 followed by 3 zeroes.
 If the desired match is precisely “15000” and there is not a check for
 a word boundary “150000”, “150002345” or “15000asdf” would match 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter

\backslash
{N,
\backslash
}
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Match at least N times 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter

\backslash
{N,M
\backslash
}
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Match between N and M times 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
'150{2,3}
\backslash
b' would match “1500” and “15000” and nothing else.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Other
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter

\backslash
|
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Alternation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Matches either expression given 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
'apple
\backslash
|orange
\backslash
|banana
\backslash
|peach'
\family default
 would match any of the strings given.
 
\end_layout

\begin_layout Plain Layout

\family typewriter
'red
\backslash
|blue plate'
\family default
 would match “red” or “blue plate” 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dash
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Indicates a range.
 When used inside a bracketed character class, the dash character specifies
 a range of values instead of a raw list of values.
 When the dash is used outside of a bracketed character class, it is interpreted
 as the literal dash character, without its special value.
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
(...)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parentheses
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Used to limit scope of alternation.
 Parentheses make it possible to match on repetition of entire strings instead
 of single characters.
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
'(red|blue) plate'
\family default
 will match either “red plate” or “blue plate”.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter

\backslash
1, 
\backslash
2, ...
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Backreferences
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Matches text previously matched within parentheses (e.g., first set, second
 set, etc.)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\lang english
Metacharacters
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
For example, suppose you are looking for amounts that contain the dollar
 sign within 
\emph on
price.list
\emph default
: 
\end_layout

\begin_layout Quote

\family typewriter
grep '[1-9]$' price.list
\end_layout

\begin_layout Standard
As a result, the search will try to match the numbers at the end of the
 line.
 This is certainly something you do not want.
 By using the escape character, annotated by the backslash (
\backslash
), you avoid such confusion: 
\end_layout

\begin_layout Quote

\family typewriter
grep '[1-9]
\backslash
$' price.list 
\end_layout

\begin_layout Standard
The metacharacter $ becomes a literal, and therefore is searched in 
\emph on
price.list
\emph default
 as a string.
 
\end_layout

\begin_layout Subsection
Rules
\end_layout

\begin_layout Standard

\family typewriter
grep
\family default
 has rules of precedence for processing.
 Repetition is processed before concatenation.
 Concatenation is processed before alternation.
 Strings are concatenated by simply being next to each other inside the
 regular expression— there is no special character to signify concatenation.
\end_layout

\begin_layout Standard
For instance, take the following regular expression:
\end_layout

\begin_layout Quote

\family typewriter
'pat{2}ern|red' 
\end_layout

\begin_layout Standard
In this example, the repetition is processed first, yielding two “t”s.
 Then, the strings are concatenated, producing “pattern” on one side of
 the pipe and “red” on the other.
 Next, the alternation is processed, creating a regular expression that
 will search for “pattern” or “red”.
 
\end_layout

\begin_layout Quote
'
\family typewriter
(pat){2}ern|red' 
\end_layout

\begin_layout Quote

\family typewriter
'pat{2}(ern|red)' 
\end_layout

\begin_layout Standard
The first example will concatenate “pat” first and then repeat it twice,
 yielding “patpatern” and “red” as the search strings.
 The second example will process the alternation subpattern first, so the
 regular expression will search for “pattern” and “pattred”.
\end_layout

\begin_layout Standard
A regular expression can continue as long as the single quote is not closed.
 For instance: 
\end_layout

\begin_layout Quote

\family typewriter
$ grep 'patt 
\end_layout

\begin_layout Quote

\family typewriter
> ern' filename
\end_layout

\begin_layout Standard
In this case, the regular expression searches for the word “pattern”.
\end_layout

\begin_layout Standard
The following regular expression: 
\end_layout

\begin_layout Quote

\family typewriter
'username:'`whoami`' and home directory is '"$HOME"
\family default
 
\end_layout

\begin_layout Standard
would match on the string “username:bambenek and home directory is /home/bambene
k”
\end_layout

\begin_layout Subsection
Basics
\end_layout

\begin_layout Standard
There are two ways to employ 
\family typewriter
grep
\family default
.
 The first examines files as follows: 
\end_layout

\begin_layout Quote

\family typewriter
grep regexp filename 
\end_layout

\begin_layout Standard

\family typewriter
grep
\family default
 searches for the designated 
\family typewriter
regexp
\family default
 in the given file (
\family typewriter
filename
\family default
).
\end_layout

\begin_layout Standard
The second method of employing 
\family typewriter
grep
\family default
 is when it examines “standard input.” For example: 
\end_layout

\begin_layout Quote

\family typewriter
cat filename | grep regexp
\end_layout

\begin_layout Standard
The 
\family typewriter
cat
\family default
 command will display the contents of a file.
 The output of this command is “piped” into the 
\family typewriter
grep
\family default
 command, which will then display only those lines that contain the given
 regexp.
\end_layout

\begin_layout Standard
It is important to note that “chaining” grep commands is inefficient most
 of the time.
 Often, a regular expression can be crafted to combine several conditions
 into a single search.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="8cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Example
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Explanation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
grep 
\series bold
-e 
\series default
-style doc.txt 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
grep will look for lines that match “-style”.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
grep 
\series bold
-f
\series default
 pattern.txt searchhere.txt 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
grep searches for all the patterns from pattern.txt in the designated file
 searchhere.txt.
 The patterns are additive; that is, grep returns every line that matches
 any pattern.
 The pattern file must list one pattern per line.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
grep 
\series bold
-v 
\series default
oranges filename 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The output would be every line in filename that does not contain the pattern
 “oranges”.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
grep
\series bold
 -c
\series default
 contact.html access.log 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prints just a count of how many lines matched in each input file.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
grep 
\series bold
-l 
\series default

\begin_inset Quotes eld
\end_inset

ERROR:
\begin_inset Quotes erd
\end_inset

 *.log
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prints just the names of input files containing the pattern.
 The search stops on the first match.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
grep -
\series bold
m 10
\series default
 'ERROR:' *.log 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This option tells grep to stop reading a file after 10 lines are matched.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
grep 
\series bold
-b
\series default
 pattern filename 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Displays the byte offset of each matching text.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
grep 
\series bold
-H
\series default
 pattern filename 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Includes the name of the file before each line printed.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
grep 
\series bold
-n
\series default
 pattern filename 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Includes the line number of each line displayed 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
grep 
\series bold
-a
\series default
 pattern filename 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Allows a binary file to be processed as if it were a text file.
 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
One final limitation of basic grep: the “extended” regular expressions metachara
cters—?, +, {, }, |, (, and )—do not work with basic grep.
 The functions provided by those characters exist if you preface them with
 an escape.
 
\end_layout

\begin_layout Subsection
Backreferences
\end_layout

\begin_layout Standard
Imagine the following text file: 
\end_layout

\begin_layout Quote

\family typewriter
The red dog fetches the green ball.
 
\end_layout

\begin_layout Quote

\family typewriter
The green dog fetches the blue ball.
\end_layout

\begin_layout Quote

\family typewriter
The blue dog fetches the blue ball.
\end_layout

\begin_layout Standard
Only the third line repeats the use of the same color.
 A regular expression pattern of 
\family typewriter
''(red|green|blue)*(red|green| blue)'' 
\family default
would return all three lines.
 To overcome this problem, you could use backreferences: 
\end_layout

\begin_layout Quote

\family typewriter
grep -E '(red|green|blue).*
\backslash
1' filename
\end_layout

\begin_layout Standard
This command matches only the third line, as intended.
 
\end_layout

\begin_layout Standard
It is important to note that backreferences require the use of parentheses
 to determine reference numbers.
 
\end_layout

\begin_layout Subsection
Performance
\end_layout

\begin_layout Standard
For most routine uses, grep performance is not an issue.
 Even megabyte-long files can be searched quickly using any of the specific
 grep programs without any noticeable performance difference.
 Obviously, the larger the file, the longer the search takes.
 
\end_layout

\begin_layout Standard
The more “choices” given to grep, the longer a particular search takes.
 For instance: 
\end_layout

\begin_layout Quote

\family typewriter
grep -E '(0|2|4|6|8)' filename
\end_layout

\begin_layout Quote

\family typewriter
grep -E '[02468]' filename
\end_layout

\begin_layout Standard
Comparing the two examples, the second one performs better because no alternatio
n is used and so lines do not have to be searched multiple times.
 Avoid alternation when other alter- natives exist that accomplish the same
 thing.
\end_layout

\begin_layout Standard
By far, the biggest cause of performance slowdowns when us- ing grep is
 the use of backreferences.
 
\end_layout

\begin_layout Subsection
Examples
\end_layout

\begin_layout Itemize

\series bold
IP addresses
\end_layout

\begin_deeper
\begin_layout Quote

\family typewriter
$ grep -E '
\backslash
b[0-9]{1,3}(
\backslash
.[0-9]{1,3}){3}
\backslash
b' patterns
\end_layout

\begin_layout Itemize
This will also find strings that aren’t valid IP addresses.
\end_layout

\begin_layout Quote

\family typewriter
$ grep -E '
\backslash
b
\end_layout

\begin_layout Quote

\family typewriter
((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)
\backslash
.){3}
\end_layout

\begin_layout Quote

\family typewriter
(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)
\backslash
b' patterns
\end_layout

\begin_layout Itemize
In this case, it makes sure to find IP addresses with an octet between 0–255
 by establishing a combination of patterns that would work.
 
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
MAC addresses
\end_layout

\begin_deeper
\begin_layout Quote

\family typewriter
$ grep -Ei '
\backslash
b[0-9a-f]{2}
\end_layout

\begin_layout Quote

\family typewriter
(:[0-9a-f]{2}){5}
\backslash
b' patterns
\end_layout

\begin_layout Itemize
In this case, the additional -i option is added so no regard is given to
 capitalization.
\end_layout

\end_deeper
\begin_layout Itemize
Email addresses
\end_layout

\begin_deeper
\begin_layout Quote

\family typewriter
$ grep -Ei '
\backslash
b[a-z0-9]{1,}@*
\backslash
.
 
\end_layout

\begin_layout Quote

\family typewriter
(com|net|org|uk|mil|gov|edu)
\backslash
b' patterns 
\end_layout

\end_deeper
\begin_layout Section

\family typewriter
sed
\end_layout

\begin_layout Standard

\family typewriter
sed
\family default
 reads the 
\family typewriter
STDIN
\family default
 into the pattern space, performs a sequence of editing commands on the
 pattern space, then writes the pattern space to 
\family typewriter
STDOUT
\family default
.
 If no flags are specified the first match on the line is replaced.
\end_layout

\begin_layout Standard
Most Unix utilties work on files, reading a line at a time.
 Sed, by default, is the same way.
\end_layout

\begin_layout Standard

\family typewriter
sed
\family default
 only operates on patterns found in the incoming data.
 That is, the input line is read, and when a pattern is matched, the modified
 output is generated, and the 
\series bold
rest
\series default
 of the input line is scanned.
\end_layout

\begin_layout Standard
The 
\family typewriter
sed
\family default
 regular expressions are essentially the same as the 
\family typewriter
grep
\family default
 regular expressions.
 They are summarized below.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="15" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="7cm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
^
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Matches the beginning of the line
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
$
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Matches the end of the line
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Matches any single character 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
(character)*
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Match arbitrarily many occurences of (character)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
(character)
\backslash
? 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Match 0 or 1 instance of (character) 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
(character)
\backslash
+
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Match 1 or more instances of (character) 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
[abcdef]
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Match any character enclosed in 
\family typewriter
[]
\family default
 (in this instance, 
\family typewriter
a b c d e
\family default
 or 
\family typewriter
f
\family default
).
 Ranges of characters such as 
\family typewriter
[a-z]
\family default
 are permitted
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
[^abcdef]
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Match any character NOT enclosed in 
\family typewriter
[]
\family default
 (in this instance, any character other than 
\family typewriter
a b c d e
\family default
 or 
\family typewriter
f
\family default
) 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
(character)
\backslash
{m,n
\backslash
}
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Match 
\family typewriter
m-n
\family default
 repetitions of (character) 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
(character)
\backslash
{m,
\backslash
}
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Match m or more repetitions of (character)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
(character)
\backslash
{,n
\backslash
}
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Match 
\family typewriter
n
\family default
 or less (possibly 0) repetitions of (character) 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
(character)
\backslash
{n
\backslash
}
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Match exactly 
\family typewriter
n
\family default
 repetitions of (character)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter

\backslash
(expression
\backslash
) 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Group operator
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter

\backslash
n 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Backreference - matches nth group 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
expression1
\backslash
|expression2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Matches 
\family typewriter
expression1
\family default
 or 
\family typewriter
expression2
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\family typewriter
\lang english
sed
\family default
 regular expressions
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The forward slash / is a special character in sed.
\end_layout

\begin_layout Subsection
Substitution
\end_layout

\begin_layout Standard
The substitution command, denoted by 
\family typewriter
s
\family default
, will substitute any string that you specify with any other string that
 you specify.
\end_layout

\begin_layout Quote

\family typewriter
sed 
\begin_inset Quotes eld
\end_inset

s/pattern/replacement text/{flags}
\begin_inset Quotes erd
\end_inset

 inputfile
\end_layout

\begin_layout Standard
The flags can be any of the following:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
n
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
replace nth instance of pattern with replacement
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
g
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
replace all instances of pattern with replacement
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
p
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
write pattern to STDOUT if a successful substitution takes place
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
w file
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
write pattern to 
\family typewriter
file
\family default
 if a successful substitution takes place
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For example, to substitute instances of the regular expression [ch]at for
 ball, use:
\end_layout

\begin_layout Quote

\family typewriter
$ sed 's/[ch]at/ball/g' < in > out
\end_layout

\begin_layout Section

\family typewriter
PERL
\end_layout

\begin_layout Subsection
Data types
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Sigil
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Array
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
@
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Indexable list of scalar values.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Code
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
&
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A piece of Perl code, e.g., a subroutine.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Format
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A format for producing reports.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Glob
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All data types.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hash
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Associative array of scalar values.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Filehandle.
 Used in input and output operations.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
$
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Strings, numbers, typeglobs, and references.
 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\lang english
Data types
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Header: 
\family typewriter
#!/bin/perl
\end_layout

\begin_layout Itemize
Comments must begin with 
\family typewriter
#
\end_layout

\begin_layout Itemize
Instructions must end with 
\family typewriter
;
\end_layout

\begin_layout Itemize

\family typewriter
$inputline = <STDIN>;
\end_layout

\begin_layout Itemize
Command-line arguments are stored in the array 
\family typewriter
@ARGV
\family default
.
\end_layout

\begin_layout Itemize
Variable declaration: 
\end_layout

\begin_deeper
\begin_layout Itemize
Scalar: 
\family typewriter
$my_scalar
\end_layout

\begin_layout Itemize
Array: 
\family typewriter
@my_array 
\family default
(must contain scalars)
\end_layout

\begin_deeper
\begin_layout Itemize
Index: 
\family typewriter
$my_array[0]
\family default
 ...
 
\family typewriter
$my_array[$#my_array]
\end_layout

\begin_layout Itemize
Length: 
\family typewriter
$length = @my_array;
\end_layout

\begin_layout Itemize
Add element: 
\family typewriter
push(@my_array,$my_value);
\end_layout

\begin_layout Itemize
Remove element: 
\family typewriter
$element = pop(@my_array);
\end_layout

\end_deeper
\begin_layout Itemize
Hash structure: 
\family typewriter
%my_hash = (user => maine, password => 1234);
\end_layout

\begin_deeper
\begin_layout Itemize
Add element : 
\family typewriter
$my_hash{
\begin_inset Quotes erd
\end_inset

key
\begin_inset Quotes erd
\end_inset

} = 
\begin_inset Quotes eld
\end_inset

value
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Access element: 
\family typewriter
$my_array{key}
\end_layout

\begin_layout Itemize
Delete element: 
\family typewriter
delete($my_hash{key})
\end_layout

\begin_layout Itemize
Exists element: 
\family typewriter
exists($my_hash{key})
\end_layout

\begin_layout Itemize
Values: 
\family typewriter
@values = values(%my_hash)
\end_layout

\begin_layout Itemize
Keys: 
\family typewriter
@keys = keys(%my_hash)
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Scalar
\series default
 
\series bold
variables
\series default
 
\series bold
operators
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
+
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Addition
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Substraction
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
*
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Multiplication
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
/
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Division
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
**
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Power
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
%
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Remainder
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Concatenation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
x
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Repetition
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
chomp
\family default
: removes the EOL of a string
\end_layout

\begin_layout Itemize

\family typewriter
chop
\family default
: removes the last character of a string
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Comparison
\series default
 
\series bold
operators
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Numeric
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
String
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
gt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
>=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ge
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
<
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
lt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
<=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
le
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
==
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
eq
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
!=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ne
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Control structures
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (boolean expression 1) {
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

elsif (boolean expression 2) {
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else {
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

while (boolean expression) {
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for ($i = 0; $i < $n; $i++) {
\end_layout

\begin_layout Plain Layout

	next; #like "continue" in C
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

foreach $variable (@array) {
\end_layout

\begin_layout Plain Layout

	last; #like "break" in C
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
I/O with files
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

open ($file_handle, "< $in_file");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

while ($line = <$file_handle>) {
\end_layout

\begin_layout Plain Layout

	chomp($line);
\end_layout

\begin_layout Plain Layout

	# ...
 process line ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

close($file_handle);
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Files with fields
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# Get fields
\end_layout

\begin_layout Plain Layout

$info = "Lou, Reed, 71";
\end_layout

\begin_layout Plain Layout

@data = split(",", $info);
\end_layout

\begin_layout Plain Layout

($name,$surname,$age) = split(",", $info);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Join fields
\end_layout

\begin_layout Plain Layout

$string = join (",", @numbers);
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
I/O with directories
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$dir_name = $ENV{PWD};
\end_layout

\begin_layout Plain Layout

if (opendir($dir_handle, $dir_name)) {
\end_layout

\begin_layout Plain Layout

	@files = readdir($dir_handle);
\end_layout

\begin_layout Plain Layout

	closedir($dir_handle);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

foreach $file_name (@files) {
\end_layout

\begin_layout Plain Layout

	if ($file_name eq "." || $file_name eq "..") {
\end_layout

\begin_layout Plain Layout

		next;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	# ...
 process file ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

foreach $number ($from ..
 $to) {
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
File Test Operators
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-e
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
File or directory exists?
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-d 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Directory exists?
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-f
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Is file?
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-l
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Is symbolic link?
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-r
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Is file readable?
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-w
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Is file writable?
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-x
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Is file executable?
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-z
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
File has zero size?
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-o
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Is owned by user?
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Subroutines
\end_layout

\begin_layout Itemize

\family typewriter
my $variable
\family default
: will only be used in subroutine.
\end_layout

\begin_layout Itemize

\family typewriter
local $variable
\family default
: will only be used in soubroutine and any subroutine called by it.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# Call
\end_layout

\begin_layout Plain Layout

&printnum ($number1, $number2, $number3);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

sub printnum { 
\end_layout

\begin_layout Plain Layout

	my ($number1, $number2, $number3) = @_; 
\end_layout

\begin_layout Plain Layout

	#or...
 $number1 = $_[0]; etc
\end_layout

\begin_layout Plain Layout

	my ($total); 
\end_layout

\begin_layout Plain Layout

	$total = $number1 + $number2 + $number3;
\end_layout

\begin_layout Plain Layout

	print ("Total: $total
\backslash
n"); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Extras
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# Get time as an array
\end_layout

\begin_layout Plain Layout

($sec,$min,$hour,$mday,$month,$year,$wday,$yday, $isdst) = localtime;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Get time as string
\end_layout

\begin_layout Plain Layout

$date = localtime;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Get user
\end_layout

\begin_layout Plain Layout

$user = getlogin();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# System calls
\end_layout

\begin_layout Plain Layout

$scripts = `ls -l *.sh`;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Comparison regexp
\end_layout

\begin_layout Plain Layout

$line = "html php javascript";
\end_layout

\begin_layout Plain Layout

if ($line =~ /^html/) {
\end_layout

\begin_layout Plain Layout

	print "$line starts with html"; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Substitution regexp
\end_layout

\begin_layout Plain Layout

$string = "Today is Monday."; 
\end_layout

\begin_layout Plain Layout

$string =~ s/Monday/Friday/;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Special Variables
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
$_
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Last read record
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
$.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Current line number for the last file handle accessed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
$0 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name of script
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
$$
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PID
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
@ARGV
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameters passed (doesn't include 
\family typewriter
$0
\family default
)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
%ENV
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Environment variables
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_body
\end_document
